{
  "name": "confetti-poll",
  "type": "registry:ui",
  "registryDependencies": [
    "avatar",
    "avatarfallback",
    "avatarimage"
  ],
  "dependencies": [
    "lucide-react"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "confetti-poll.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { useState } from \"react\"\r\nimport { Eye, Heart, MessageSquare, Bookmark, MoreHorizontal } from \"lucide-react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\r\nimport confetti from \"canvas-confetti\"\r\n\r\n// Types\r\nexport interface PollOption {\r\n  id: string\r\n  text: string\r\n  votes: number\r\n  percentage: number\r\n}\r\n\r\nexport interface PollProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  question: string\r\n  options: PollOption[]\r\n  onVote?: (optionId: string) => void\r\n  showResults?: boolean\r\n  totalVotes?: number\r\n  userVote?: string | null\r\n  author?: {\r\n    name: string\r\n    username: string\r\n    avatar: string\r\n  }\r\n  stats?: {\r\n    views?: number\r\n    likes?: number\r\n    comments?: number\r\n  }\r\n}\r\n\r\n// Component\r\nconst Poll = React.forwardRef<HTMLDivElement, PollProps>(\r\n  (\r\n    {\r\n      className,\r\n      question,\r\n      options: initialOptions,\r\n      onVote,\r\n      showResults: initialShowResults = false,\r\n      totalVotes: initialTotalVotes,\r\n      userVote: initialUserVote = null,\r\n      author,\r\n      stats: initialStats,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const [hasVoted, setHasVoted] = useState(Boolean(initialUserVote))\r\n    const [selectedOption, setSelectedOption] = useState<string | null>(initialUserVote)\r\n    const [pollOptions, setPollOptions] = useState<PollOption[]>(initialOptions)\r\n    const [showResults, setShowResults] = useState(initialShowResults)\r\n    const [stats, setStats] = useState(initialStats)\r\n    const [isLiked, setIsLiked] = useState(false)\r\n\r\n    const totalVotes = initialTotalVotes || pollOptions.reduce((sum, option) => sum + option.votes, 0)\r\n\r\n    const handleVote = (optionId: string) => {\r\n      if (hasVoted) return\r\n\r\n      setSelectedOption(optionId)\r\n      setPollOptions((prev) =>\r\n        prev.map((option) => ({\r\n          ...option,\r\n          votes: option.id === optionId ? option.votes + 1 : option.votes,\r\n        })),\r\n      )\r\n\r\n      confetti({\r\n        particleCount: 100,\r\n        spread: 70,\r\n        origin: { y: 0.6 },\r\n      })\r\n\r\n      setHasVoted(true)\r\n      setShowResults(true)\r\n      onVote?.(optionId)\r\n    }\r\n\r\n    const handleLike = () => {\r\n      setIsLiked((prev) => !prev)\r\n      setStats((prev) => ({\r\n        ...prev,\r\n        // @ts-ignore\r\n        likes: prev.likes + (isLiked ? -1 : 1),\r\n      }))\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          \"w-full max-w-[598px] bg-white dark:bg-black border border-gray-200 dark:border-gray-800 rounded-2xl mt-20 mb-20\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        <div className=\"p-4\">\r\n          {/* Author Section */}\r\n          {author && (\r\n            <div className=\"flex items-start justify-between gap-2 mb-3\">\r\n              <div className=\"flex gap-3\">\r\n                <Avatar className=\"h-10 w-10 rounded-full\">\r\n                  <AvatarImage src={author.avatar} alt={`@${author.username}`} />\r\n                  <AvatarFallback>{author.name.slice(0, 2).toUpperCase()}</AvatarFallback>\r\n                </Avatar>\r\n                <div>\r\n                  <div className=\"flex items-center gap-1 text-[15px] leading-5\">\r\n                    <span className=\"font-bold text-gray-900 dark:text-gray-100\">{author.name}</span>\r\n                    <span className=\"text-gray-500 dark:text-gray-400\">@{author.username}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <button className=\"text-gray-500 hover:text-gray-900 dark:hover:text-gray-100\">\r\n                <MoreHorizontal className=\"h-5 w-5\" />\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {/* Poll Content */}\r\n          <div className=\"mb-3\">\r\n            <p className=\"text-[15px] leading-5 text-gray-900 dark:text-gray-100 whitespace-pre-wrap\">{question}</p>\r\n          </div>\r\n\r\n          <div className=\"mb-3\">\r\n            {pollOptions.map((option) => (\r\n              <button\r\n                key={option.id}\r\n                onClick={() => handleVote(option.id)}\r\n                disabled={hasVoted}\r\n                className={cn(\r\n                  \"w-full text-left relative py-1 mb-2\",\r\n                  showResults ? \"cursor-default\" : \"cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800\",\r\n                )}\r\n              >\r\n                <div className=\"flex items-center\">\r\n                  {showResults && (\r\n                    <div\r\n                      className=\"absolute left-0 top-0 bottom-0 bg-blue-100 dark:bg-blue-900 rounded transition-all duration-500\"\r\n                      style={{ width: `${option.percentage}%` }}\r\n                    />\r\n                  )}\r\n                  <div className=\"relative flex justify-between items-center w-full z-10 px-3 py-2\">\r\n                    <span className=\"text-[15px] leading-5 text-gray-900 dark:text-gray-100\">{option.text}</span>\r\n                    {showResults && (\r\n                      <span className=\"text-[13px] leading-4 text-gray-500 dark:text-gray-400 ml-2\">\r\n                        {option.percentage.toFixed(1)}%\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </button>\r\n            ))}\r\n          </div>\r\n\r\n          {showResults && (\r\n            <p className=\"text-[13px] leading-4 text-gray-500 dark:text-gray-400 mb-3\">\r\n              {totalVotes} votes Â· Final results\r\n            </p>\r\n          )}\r\n\r\n          {/* Stats Footer */}\r\n          {stats && (\r\n            <div className=\"flex items-center justify-between text-gray-500 dark:text-gray-400 border-t border-gray-200 dark:border-gray-800 pt-3\">\r\n              <div className=\"flex space-x-6\">\r\n                <button className=\"group flex items-center hover:text-blue-500\">\r\n                  <Eye className=\"h-[18px] w-[18px] mr-2\" />\r\n                  <span className=\"text-[13px] leading-4 group-hover:text-blue-500\">\r\n                    {stats.views?.toLocaleString()}\r\n                  </span>\r\n                </button>\r\n                <button\r\n                  className={cn(\"group flex items-center\", isLiked ? \"text-pink-500\" : \"hover:text-pink-500\")}\r\n                  onClick={handleLike}\r\n                >\r\n                  <Heart className={cn(\"h-[18px] w-[18px] mr-2\", isLiked && \"fill-current\")} />\r\n                  <span\r\n                    className={cn(\"text-[13px] leading-4\", isLiked ? \"text-pink-500\" : \"group-hover:text-pink-500\")}\r\n                  >\r\n                    {stats.likes?.toLocaleString()}\r\n                  </span>\r\n                </button>\r\n                <button className=\"group flex items-center hover:text-blue-500\">\r\n                  <MessageSquare className=\"h-[18px] w-[18px] mr-2\" />\r\n                  <span className=\"text-[13px] leading-4 group-hover:text-blue-500\">\r\n                    {stats.comments?.toLocaleString()}\r\n                  </span>\r\n                </button>\r\n              </div>\r\n              <button className=\"flex items-center hover:text-blue-500\">\r\n                <Bookmark className=\"h-[18px] w-[18px] mr-2\" />\r\n                <span className=\"text-[13px] leading-4\">Save</span>\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  },\r\n)\r\nPoll.displayName = \"Poll\"\r\n\r\nexport { Poll }\r\n\r\n",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": [
      "npx shadcn@latest add avatar",
      "npx shadcn@latest add avatarfallback",
      "npx shadcn@latest add avatarimage"
    ]
  }
}