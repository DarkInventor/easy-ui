{
  "name": "beam-card",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "framer-motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "beam-card.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { motion, useMotionTemplate, useMotionValue } from \"framer-motion\"\nimport { cn } from \"@/lib/utils\"\n\ninterface BeamCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  beamColor?: string\n  glowColor?: string\n  borderColor?: string\n  hoverColor?: string\n}\n\nexport const BeamCard = React.forwardRef<HTMLDivElement, BeamCardProps>(\n  (\n    {\n      className,\n      children,\n      beamColor = \"#3b82f6\",\n      glowColor = \"rgba(59, 130, 246, 0.5)\",\n      borderColor = \"bg-gray-300 dark:bg-gray-700\",\n      hoverColor = \"rgba(59, 130, 246, 0.2)\",\n      ...props\n    },\n    ref,\n  ) => {\n    const [hovered, setHovered] = React.useState(false)\n    const mouseX = useMotionValue(0)\n    const mouseY = useMotionValue(0)\n\n    const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n      const rect = e.currentTarget.getBoundingClientRect()\n      mouseX.set(e.clientX - rect.left)\n      mouseY.set(e.clientY - rect.top)\n    }\n\n    const glowStyle = useMotionTemplate`radial-gradient(\n      150px circle at ${mouseX}px ${mouseY}px,\n      ${glowColor},\n      transparent 80%\n    )`\n\n    return (\n      <motion.div\n        ref={ref}\n        className={cn(\n          \"relative overflow-hidden rounded-xl p-[1px] transition-colors duration-300\",\n          \"bg-slate-100 dark:bg-slate-800\",\n          className,\n        )}\n        style={{ background: borderColor }}\n        onMouseMove={handleMouseMove}\n        onMouseEnter={() => setHovered(true)}\n        onMouseLeave={() => setHovered(false)}\n        animate={{ background: hovered ? hoverColor : borderColor }}\n        {...props}\n      >\n        <motion.div\n          className=\"absolute inset-0 rounded-xl opacity-0 transition-opacity duration-300\"\n          style={{ background: glowStyle }}\n          animate={{ opacity: hovered ? 1 : 0 }}\n        />\n        <motion.div\n          className=\"absolute inset-0 rounded-xl\"\n          style={{\n            background: `linear-gradient(90deg, transparent, ${beamColor}, transparent)`,\n            opacity: 0.5,\n            left: \"-100%\",\n          }}\n          animate={{\n            left: \"100%\",\n          }}\n          transition={{\n            duration: 3,\n            repeat: Number.POSITIVE_INFINITY,\n            repeatDelay: 1,\n          }}\n        />\n        <div className=\"relative rounded-[11px] bg-white dark:bg-black p-5 md:p-6\">{children}</div>\n      </motion.div>\n    )\n  },\n)\nBeamCard.displayName = \"BeamCard\"\n\n",
      "type": "registry:ui"
    },
    {
      "path": "beam-button.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { motion, useMotionTemplate, useMotionValue } from \"framer-motion\"\nimport { cn } from \"@/lib/utils\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nconst beamButtonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:pointer-events-none disabled:opacity-50 dark:focus-visible:ring-slate-300\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-white text-slate-900 hover:bg-slate-100 dark:bg-black dark:text-slate-100 dark:hover:bg-slate-800 border border-slate-200 dark:border-slate-700 hover:\",\n        outline:\n          \"border border-slate-200 bg-white hover:bg-slate-100 hover:text-slate-900 dark:border-slate-700 dark:bg-black dark:hover:bg-slate-800 dark:hover:text-slate-50\",\n        ghost:\n          \"hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50 border border-transparent\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 px-3 text-xs\",\n        lg: \"h-10 px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\ninterface BeamButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof beamButtonVariants> {\n  asChild?: boolean\n  beamProps?: {\n    beamColor?: string\n    glowColor?: string\n    hoverColor?: string\n  }\n}\n\nconst BeamButton = React.forwardRef<HTMLButtonElement, BeamButtonProps>(\n  ({ className, variant, size, asChild = false, beamProps = {}, children, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    const [hovered, setHovered] = React.useState(false)\n    const mouseX = useMotionValue(0)\n    const mouseY = useMotionValue(0)\n\n    const {\n      beamColor = \"#3b82f6\",\n      glowColor = \"rgba(59, 130, 246, 0.5)\",\n      hoverColor = \"rgba(59, 130, 246, 0.2)\",\n    } = beamProps\n\n    const handleMouseMove = (e: React.MouseEvent<HTMLButtonElement>) => {\n      const rect = e.currentTarget.getBoundingClientRect()\n      mouseX.set(e.clientX - rect.left)\n      mouseY.set(e.clientY - rect.top)\n    }\n\n    const glowStyle = useMotionTemplate`radial-gradient(\n      120px circle at ${mouseX}px ${mouseY}px,\n      ${glowColor},\n      transparent 80%\n    )`\n\n    return (\n      <motion.div\n        className=\"relative inline-flex overflow-hidden rounded-[0.75rem] transition-colors duration-300\"\n        style={{ background: hovered ? hoverColor : \"transparent\" }}\n                onMouseMove={handleMouseMove}\n        onMouseEnter={() => setHovered(true)}\n        onMouseLeave={() => setHovered(false)}\n      >\n        <motion.div\n          className=\"absolute inset-0 rounded-md opacity-0 transition-opacity duration-300\"\n          style={{ background: glowStyle }}\n          animate={{ opacity: hovered ? 1 : 0 }}\n        />\n        <Comp className={cn(beamButtonVariants({ variant, size, className }))} ref={ref} {...props}>\n          {children}\n        </Comp>\n      </motion.div>\n    )\n  },\n)\nBeamButton.displayName = \"BeamButton\"\n\nexport { BeamButton, beamButtonVariants }\n\n",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": []
  }
}