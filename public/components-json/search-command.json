{
  "name": "search-command",
  "type": "registry:ui",
  "registryDependencies": [
    "button",
    "command",
    "commandempty",
    "commandgroup",
    "commandinput",
    "commanditem",
    "commandlist",
    ""
  ],
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "search-command.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { AnimatePresence, motion } from \"framer-motion\"\nimport {\n  ChevronDownIcon,\n  ChevronUpIcon,\n  CommandIcon,\n  HashIcon,\n  RotateCcwIcon,\n  XIcon,\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\n\ntype Page = \"main\" | \"tags\" | \"parent\"\n\ntype TagData = {\n  tag: string\n  url: string\n}\n\ntype FullFeaturedCommandPaletteProps = {\n  tagsData: TagData[]\n}\n\nexport default function SearchCommand({\n  tagsData,\n}: FullFeaturedCommandPaletteProps) {\n  const [open, setOpen] = React.useState(false)\n  const [search, setSearch] = React.useState(\"\")\n  const [theme] = React.useState<\"light\" | \"dark\">(\"light\")\n  const [currentPage, setCurrentPage] = React.useState<Page>(\"main\")\n  const [selectedTags, setSelectedTags] = React.useState<string[]>([])\n  const [navigationIndex, setNavigationIndex] = React.useState(-1)\n\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n    document.addEventListener(\"keydown\", down)\n    return () => document.removeEventListener(\"keydown\", down)\n  }, [])\n\n  const filteredTags = tagsData\n    ? tagsData.filter(({ tag }) =>\n        tag.toLowerCase().includes(search.toLowerCase())\n      )\n    : []\n\n  const handleTagSelect = (tag: string) => {\n    setSelectedTags((prev) =>\n      prev.includes(tag) ? prev.filter((t) => t !== tag) : [...prev, tag]\n    )\n  }\n\n  const handleNavigate = (direction: \"up\" | \"down\") => {\n    setNavigationIndex((prev) => {\n      if (direction === \"up\") {\n        return prev > 0 ? prev - 1 : filteredTags.length - 1\n      } else {\n        return prev < filteredTags.length - 1 ? prev + 1 : 0\n      }\n    })\n  }\n\n//   const handleOpen = () => {\n//     if (navigationIndex >= 0 && navigationIndex < filteredTags.length) {\n//       const tag = filteredTags[navigationIndex].tag\n//       handleTagSelect(tag)\n//     }\n//   }\n\n//   const handleParent = () => {\n//     if (currentPage === \"tags\") {\n//       setCurrentPage(\"main\")\n//     }\n//   }\n\n  if (!open) {\n    return null\n  }\n\n  return (\n    <div className=\"fixed top-20 py-10 lg:py-20 px-4 left-0 right-0 h-auto flex items-center justify-center transition-colors duration-300 bg-transparent pointer-events-none dark:bg-transparent \">\n      <div className=\"pointer-events-auto\">\n        <motion.div\n          initial={false}\n          animate={\n            open ? { scale: 1, opacity: 1 } : { scale: 0.95, opacity: 0 }\n          }\n          transition={{ type: \"spring\", bounce: 0, duration: 0.3 }}\n          className=\"relative max-w-sm px-4 lg:w-full md:w-full lg:max-w-3xl md:max-w-xl\"\n        >\n          <Command className=\"rounded-xl shadow-lg backdrop-blur-xl bg-transparent dark:border-gray-900 dark:border text-black dark:text-gray-100 leading-7 tracking-tight \">\n            <div className=\"flex items-center border-b border-1 border-gray-200 dark:border-gray-700 px-3\">\n              <CommandInput\n                placeholder=\"Type a command or search\"\n                value={search}\n                onValueChange={setSearch}\n                className=\"flex h-14 w-[650px] rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-gray-500 dark:placeholder:text-gray-400 disabled:cursor-not-allowed disabled:opacity-50 tracking-tight leading-7\"\n              />\n              <kbd className=\"hidden sm:inline-flex h-8 select-none items-center gap-1 rounded p-2 ml-[-20px] mr-2 font-mono text-[12px] font-medium bg-gray-200 dark:bg-gray-900 text-black dark:text-gray-300\">\n                {/* âŒ˜K */}\n                <CommandIcon className=\"h-3 w-3 bg-transparent text-black dark:text-white\" />\n                K\n              </kbd>\n            </div>\n            <CommandList className=\"max-h-[400px] overflow-y-auto overflow-x-hidden p-2\">\n              <CommandEmpty className=\"py-6 text-center\">\n                <HashIcon className=\"w-12 h-12 mx-auto mb-4 text-gray-600 dark:text-gray-400\" />\n                <h3 className=\"text-lg font-semibold mb-1\">No tags found</h3>\n                <p className=\"text-sm mb-4 text-gray-600 dark:text-gray-400\">\n                  &quot;{search}&quot; did not match any tags currently used in\n                  projects. Please try again or create a new tag.\n                </p>\n                <Button\n                  variant=\"outline\"\n                  className=\"bg-white hover:bg-gray-100 dark:bg-gray-800 dark:hover:bg-gray-700\"\n                  onClick={() => setSearch(\"\")}\n                >\n                  Clear search\n                </Button>\n              </CommandEmpty>\n              <CommandGroup\n                className=\"text-gray-500 font-bold tracking-tight leading-7 \"\n                heading=\"Tags\"\n              >\n                <AnimatePresence>\n                  {filteredTags.map(({ tag, url }, index) => (\n                    <motion.div\n                      key={tag}\n                      initial={{ opacity: 0, y: -10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: -10 }}\n                      transition={{\n                        type: \"spring\",\n                        stiffness: 300,\n                        damping: 30,\n                      }}\n                      className=\"font-normal text-md\"\n                      onClick={() => (window.location.href = url)}\n                    >\n                      <CommandItem\n                        className={`px-2 py-2 rounded-lg cursor-pointer ${\n                          index === navigationIndex\n                            ? \"bg-black/10 dark:bg-white/20 text-gray-700 dark:text-white\"\n                            : \"\"\n                        } hover:bg-black/5 dark:hover:bg-white/10 text-black dark:text-gray-300 transition-colors`}\n                      >\n                        <a\n                          href={url}\n                          className={\n                            selectedTags.includes(tag) ? \"font-bold\" : \"\"\n                          }\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                        >\n                          {tag}\n                        </a>\n                      </CommandItem>\n                    </motion.div>\n                  ))}\n                </AnimatePresence>\n              </CommandGroup>\n            </CommandList>\n            <div className=\"flex flex-wrap items-center justify-between gap-2 border-t px-2 py-2 text-sm border-gray-200 dark:border-gray-700 text-gray-600 dark:text-gray-400\">\n              <div className=\"flex flex-wrap items-center gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-8 w-8\"\n                  onClick={() => setCurrentPage(\"tags\")}\n                >\n                  <HashIcon className=\"h-4 w-4\" />\n                </Button>\n                <span className=\"hidden sm:block\">tags</span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-8 w-8 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                  onClick={() => handleNavigate(\"up\")}\n                >\n                  <ChevronUpIcon className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-8 w-8 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                  onClick={() => handleNavigate(\"down\")}\n                >\n                  <ChevronDownIcon className=\"h-4 w-4\" />\n                </Button>\n                <span className=\"hidden sm:block\">navigate</span>\n              </div>\n              <div className=\"flex flex-wrap items-center gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-8 w-8 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                  onClick={() => {\n                    setSearch(\"\")\n                    setSelectedTags([])\n                    setNavigationIndex(-1)\n                  }}\n                >\n                  <RotateCcwIcon className=\"h-4 w-4\" />\n                </Button>\n                <span className=\"hidden sm:block\">reset</span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-8 w-8 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                  onClick={() => setOpen(false)}\n                >\n                  <XIcon className=\"h-4 w-4\" />\n                </Button>\n                <span className=\"hidden sm:block mr-2\">close</span>\n              </div>\n            </div>\n          </Command>\n        </motion.div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": [
      "npx shadcn@latest add button",
      "npx shadcn@latest add command",
      "npx shadcn@latest add commandempty",
      "npx shadcn@latest add commandgroup",
      "npx shadcn@latest add commandinput",
      "npx shadcn@latest add commanditem",
      "npx shadcn@latest add commandlist",
      "npx shadcn@latest add "
    ]
  }
}