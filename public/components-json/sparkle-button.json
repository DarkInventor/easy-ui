{
  "name": "sparkle-button",
  "type": "registry:ui",
  "registryDependencies": [
    "button"
  ],
  "dependencies": [],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "sparkle-button.tsx",
      "content": "import React, { CSSProperties, useEffect, useRef, useState } from \"react\"\n\nimport { Button } from \"../ui/button\"\n\nconst RANDOM = (min: number, max: number) =>\n  Math.floor(Math.random() * (max - min + 1) + min)\n\ninterface SparkleProps {\n  text: string\n  size: any\n  variant: any\n}\n\nconst SparkleButton = ({ text, size, variant }: SparkleProps) => {\n  const [isActive, setIsActive] = useState(false)\n  const particlesRef = useRef<Array<HTMLDivElement | null>>([])\n\n  useEffect(() => {\n    particlesRef.current.forEach((P) => {\n      if (P) {\n        P.style.setProperty(\"--x\", `${RANDOM(20, 80)}`)\n        P.style.setProperty(\"--y\", `${RANDOM(20, 80)}`)\n        P.style.setProperty(\"--duration\", `${RANDOM(6, 20)}`)\n        P.style.setProperty(\"--delay\", `${RANDOM(1, 10)}`)\n        P.style.setProperty(\"--alpha\", `${RANDOM(40, 90) / 100}`)\n        P.style.setProperty(\n          \"--origin-x\",\n          `${Math.random() > 0.5 ? RANDOM(300, 800) * -1 : RANDOM(300, 800)}%`\n        )\n        P.style.setProperty(\n          \"--origin-y\",\n          `${Math.random() > 0.5 ? RANDOM(300, 800) * -1 : RANDOM(300, 800)}%`\n        )\n        P.style.setProperty(\"--size\", `${RANDOM(40, 90) / 100}`)\n      }\n    })\n  }, [])\n\n  return (\n    // @ts-ignore\n    <div className=\"flex h-full w-full items-center justify-center overflow-hidden bg-transparent\">\n      <div className=\"sparkle-button relative\">\n        <Button\n          className=\"relative text-sm py-3 px-5 rounded-full flex items-center gap-1 whitespace-nowrap transition-all duration-250 cursor-pointer\"\n          onMouseEnter={() => setIsActive(true)}\n          onMouseLeave={() => setIsActive(false)}           \n          size={size}\n          variant={variant}\n          style={\n            {\n              \"--active\": isActive ? \"1\" : \"0\",\n              \"--cut\": \"0.1em\",\n              background: `\n              radial-gradient(\n                40% 50% at center 100%,\n                hsl(270 calc(var(--active) * 97%) 72% / var(--active)),\n                transparent\n              ),\n              radial-gradient(\n                80% 100% at center 120%,\n                hsl(260 calc(var(--active) * 97%) 70% / var(--active)),\n                transparent\n              ),\n              hsl(260 calc(var(--active) * 97%) calc((var(--active) * 44%) + 12%))\n            `,\n              boxShadow: `\n              0 0 calc(var(--active) * 6em) calc(var(--active) * 3em) hsl(260 97% 61% / 0.75),\n              0 0.05em 0 0 hsl(260 calc(var(--active) * 97%) calc((var(--active) * 50%) + 30%)) inset,\n              0 -0.05em 0 0 hsl(260 calc(var(--active) * 97%) calc(var(--active) * 60%)) inset\n            `,\n              transform: `scale(calc(1 + (var(--active) * 0.1)))`,\n            } as CSSProperties\n          }\n        >\n          <span\n            className=\"text relative z-10 translate-x-[2%] -translate-y-[6%] \"\n            style={{\n              background: `linear-gradient(90deg, hsl(0 0% calc((var(--active) * 100%) + 65%)), hsl(0 0% calc((var(--active) * 100%) + 26%)))`,\n              WebkitBackgroundClip: \"text\",\n              color: \"transparent\",\n            }}\n          >\n            {text}\n          </span>\n          <svg\n            className=\"sparkle w-6 h-6 ml-3 relative z-10 -translate-x-[25%] -translate-y-[5%]\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n           \n            <path\n              d=\"M10 7L15 12L10 17\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              style={{\n                color: `hsl(0 0% calc((var(--active, 0) * 70%) + 20%))`,\n                // animation: isActive ? 'bounce 0.6s' : 'none',\n                animationDelay: \"calc((0.25s * 1.5) + (0.1s * 1s))\",\n                // @ts-ignore\n                \"--scale\": \"0.5\",\n              }}\n            />\n            <path\n              d=\"M15 12H3\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              style={{\n                color: `hsl(0 0% calc((var(--active, 0) * 70%) + 20%))`,\n                // animation: isActive ? 'bounce 0.6s' : 'none',\n                animationDelay: \"calc((0.25s * 1.5) + (0.2s * 1s))\",\n                // @ts-ignore\n                \"--scale\": \"1.5\",\n              }}\n            />\n          </svg>\n          <div\n            className=\"spark absolute inset-0 rounded-full rotate-0 overflow-hidden\"\n            style={{\n              mask: \"linear-gradient(white, transparent 50%)\",\n              animation: \"flip 3.6s infinite steps(2, end)\",\n            }}\n          >\n            <div\n              className=\"spark-rotate absolute w-[200%] aspect-square top-0 left-1/2 -translate-x-1/2 -translate-y-[15%] -rotate-90 animate-rotate\"\n              style={{\n                opacity: `calc((var(--active)) + 0.4)`,\n                background:\n                  \"conic-gradient(from 0deg, transparent 0 340deg, white 360deg)\",\n              }}\n            />\n          </div>\n          <div\n            className=\"backdrop absolute rounded-full transition-all duration-250\"\n            style={{\n              inset: \"var(--cut)\",\n              background: `\n                   radial-gradient(\n                     40% 50% at center 100%,\n                     hsl(270 calc(var(--active) * 97%) 72% / var(--active)),\n                     transparent\n                   ),\n                   radial-gradient(\n                     80% 100% at center 120%,\n                     hsl(260 calc(var(--active) * 97%) 70% / var(--active)),\n                     transparent\n                   ),\n                   hsl(260 calc(var(--active) * 97%) calc((var(--active) * 44%) + 12%))\n                 `,\n            }}\n          />\n        </Button>\n        <div\n          className=\"particle-pen absolute w-[200%] aspect-square top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-[-1]\"\n          style={{\n            WebkitMask: \"radial-gradient(white, transparent 65%)\",\n            opacity: isActive ? \"1\" : \"0\",\n            transition: \"opacity 0.25s\",\n          }}\n        >\n          {[...Array(20)].map((_, index) => (\n            <div\n              key={index}\n               // @ts-ignore\n              ref={(el) => (particlesRef.current[index] = el)}\n              className=\"particle absolute animate-float-out\"\n              style={\n                {\n                  \"--duration\": `calc(var(--duration, 1) * 1s)`,\n                  \"--delay\": `calc(var(--delay, 0) * -1s)`,\n                  width: \"calc(var(--size, 0.25) * 1rem)\",\n                  aspectRatio: \"1\",\n                  top: \"calc(var(--y, 50) * 1%)\",\n                  left: \"calc(var(--x, 50) * 1%)\",\n                  opacity: \"var(--alpha, 1)\",\n                  animationDirection: index % 2 === 0 ? \"reverse\" : \"normal\",\n                  animationPlayState: isActive ? \"running\" : \"paused\",\n                  transformOrigin:\n                    \"var(--origin-x, 1000%) var(--origin-y, 1000%)\",\n                } as CSSProperties\n              }\n            >\n              <svg\n                width=\"100%\"\n                height=\"100%\"\n                viewBox=\"0 0 15 15\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  d=\"M7.5 0L9.08257 5.17647L13.5 7.5L9.08257 9.82353L7.5 15L5.91743 9.82353L1.5 7.5L5.91743 5.17647L7.5 0Z\"\n                  fill=\"hsl(260, 97%, 61%)\"\n                />\n              </svg>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SparkleButton\n",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": [
      "npx shadcn@latest add button"
    ]
  }
}