{
  "name": "sparkle-button",
  "type": "registry:ui",
  "registryDependencies": [
    "button"
  ],
  "dependencies": [],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "sparkle-button.tsx",
      "content": "import React, { CSSProperties, useEffect, useRef, useState } from \"react\"\r\n\r\nimport { Button } from \"../ui/button\"\r\n\r\nconst RANDOM = (min: number, max: number) =>\r\n  Math.floor(Math.random() * (max - min + 1) + min)\r\n\r\ninterface SparkleProps {\r\n  text: string\r\n  size: any\r\n  variant: any\r\n}\r\n\r\nconst SparkleButton = ({ text, size, variant }: SparkleProps) => {\r\n  const [isActive, setIsActive] = useState(false)\r\n  const particlesRef = useRef<Array<HTMLDivElement | null>>([])\r\n\r\n  useEffect(() => {\r\n    particlesRef.current.forEach((P) => {\r\n      if (P) {\r\n        P.style.setProperty(\"--x\", `${RANDOM(20, 80)}`)\r\n        P.style.setProperty(\"--y\", `${RANDOM(20, 80)}`)\r\n        P.style.setProperty(\"--duration\", `${RANDOM(6, 20)}`)\r\n        P.style.setProperty(\"--delay\", `${RANDOM(1, 10)}`)\r\n        P.style.setProperty(\"--alpha\", `${RANDOM(40, 90) / 100}`)\r\n        P.style.setProperty(\r\n          \"--origin-x\",\r\n          `${Math.random() > 0.5 ? RANDOM(300, 800) * -1 : RANDOM(300, 800)}%`\r\n        )\r\n        P.style.setProperty(\r\n          \"--origin-y\",\r\n          `${Math.random() > 0.5 ? RANDOM(300, 800) * -1 : RANDOM(300, 800)}%`\r\n        )\r\n        P.style.setProperty(\"--size\", `${RANDOM(40, 90) / 100}`)\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    // @ts-ignore\r\n    <div className=\"flex h-full w-full items-center justify-center overflow-hidden bg-transparent\">\r\n      <div className=\"sparkle-button relative\">\r\n        <Button\r\n          className=\"relative text-sm py-3 px-5 rounded-full flex items-center gap-1 whitespace-nowrap transition-all duration-250 cursor-pointer\"\r\n          onMouseEnter={() => setIsActive(true)}\r\n          onMouseLeave={() => setIsActive(false)}           \r\n          size={size}\r\n          variant={variant}\r\n          style={\r\n            {\r\n              \"--active\": isActive ? \"1\" : \"0\",\r\n              \"--cut\": \"0.1em\",\r\n              background: `\r\n              radial-gradient(\r\n                40% 50% at center 100%,\r\n                hsl(270 calc(var(--active) * 97%) 72% / var(--active)),\r\n                transparent\r\n              ),\r\n              radial-gradient(\r\n                80% 100% at center 120%,\r\n                hsl(260 calc(var(--active) * 97%) 70% / var(--active)),\r\n                transparent\r\n              ),\r\n              hsl(260 calc(var(--active) * 97%) calc((var(--active) * 44%) + 12%))\r\n            `,\r\n              boxShadow: `\r\n              0 0 calc(var(--active) * 6em) calc(var(--active) * 3em) hsl(260 97% 61% / 0.75),\r\n              0 0.05em 0 0 hsl(260 calc(var(--active) * 97%) calc((var(--active) * 50%) + 30%)) inset,\r\n              0 -0.05em 0 0 hsl(260 calc(var(--active) * 97%) calc(var(--active) * 60%)) inset\r\n            `,\r\n              transform: `scale(calc(1 + (var(--active) * 0.1)))`,\r\n            } as CSSProperties\r\n          }\r\n        >\r\n          <span\r\n            className=\"text relative z-10 translate-x-[2%] -translate-y-[6%] \"\r\n            style={{\r\n              background: `linear-gradient(90deg, hsl(0 0% calc((var(--active) * 100%) + 65%)), hsl(0 0% calc((var(--active) * 100%) + 26%)))`,\r\n              WebkitBackgroundClip: \"text\",\r\n              color: \"transparent\",\r\n            }}\r\n          >\r\n            {text}\r\n          </span>\r\n          <svg\r\n            className=\"sparkle w-6 h-6 ml-3 relative z-10 -translate-x-[25%] -translate-y-[5%]\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n           \r\n            <path\r\n              d=\"M10 7L15 12L10 17\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              style={{\r\n                color: `hsl(0 0% calc((var(--active, 0) * 70%) + 20%))`,\r\n                // animation: isActive ? 'bounce 0.6s' : 'none',\r\n                animationDelay: \"calc((0.25s * 1.5) + (0.1s * 1s))\",\r\n                // @ts-ignore\r\n                \"--scale\": \"0.5\",\r\n              }}\r\n            />\r\n            <path\r\n              d=\"M15 12H3\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              style={{\r\n                color: `hsl(0 0% calc((var(--active, 0) * 70%) + 20%))`,\r\n                // animation: isActive ? 'bounce 0.6s' : 'none',\r\n                animationDelay: \"calc((0.25s * 1.5) + (0.2s * 1s))\",\r\n                // @ts-ignore\r\n                \"--scale\": \"1.5\",\r\n              }}\r\n            />\r\n          </svg>\r\n          <div\r\n            className=\"spark absolute inset-0 rounded-full rotate-0 overflow-hidden\"\r\n            style={{\r\n              mask: \"linear-gradient(white, transparent 50%)\",\r\n              animation: \"flip 3.6s infinite steps(2, end)\",\r\n            }}\r\n          >\r\n            <div\r\n              className=\"spark-rotate absolute w-[200%] aspect-square top-0 left-1/2 -translate-x-1/2 -translate-y-[15%] -rotate-90 animate-rotate\"\r\n              style={{\r\n                opacity: `calc((var(--active)) + 0.4)`,\r\n                background:\r\n                  \"conic-gradient(from 0deg, transparent 0 340deg, white 360deg)\",\r\n              }}\r\n            />\r\n          </div>\r\n          <div\r\n            className=\"backdrop absolute rounded-full transition-all duration-250\"\r\n            style={{\r\n              inset: \"var(--cut)\",\r\n              background: `\r\n                   radial-gradient(\r\n                     40% 50% at center 100%,\r\n                     hsl(270 calc(var(--active) * 97%) 72% / var(--active)),\r\n                     transparent\r\n                   ),\r\n                   radial-gradient(\r\n                     80% 100% at center 120%,\r\n                     hsl(260 calc(var(--active) * 97%) 70% / var(--active)),\r\n                     transparent\r\n                   ),\r\n                   hsl(260 calc(var(--active) * 97%) calc((var(--active) * 44%) + 12%))\r\n                 `,\r\n            }}\r\n          />\r\n        </Button>\r\n        <div\r\n          className=\"particle-pen absolute w-[200%] aspect-square top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-[-1]\"\r\n          style={{\r\n            WebkitMask: \"radial-gradient(white, transparent 65%)\",\r\n            opacity: isActive ? \"1\" : \"0\",\r\n            transition: \"opacity 0.25s\",\r\n          }}\r\n        >\r\n          {[...Array(20)].map((_, index) => (\r\n            <div\r\n              key={index}\r\n               // @ts-ignore\r\n              ref={(el) => (particlesRef.current[index] = el)}\r\n              className=\"particle absolute animate-float-out\"\r\n              style={\r\n                {\r\n                  \"--duration\": `calc(var(--duration, 1) * 1s)`,\r\n                  \"--delay\": `calc(var(--delay, 0) * -1s)`,\r\n                  width: \"calc(var(--size, 0.25) * 1rem)\",\r\n                  aspectRatio: \"1\",\r\n                  top: \"calc(var(--y, 50) * 1%)\",\r\n                  left: \"calc(var(--x, 50) * 1%)\",\r\n                  opacity: \"var(--alpha, 1)\",\r\n                  animationDirection: index % 2 === 0 ? \"reverse\" : \"normal\",\r\n                  animationPlayState: isActive ? \"running\" : \"paused\",\r\n                  transformOrigin:\r\n                    \"var(--origin-x, 1000%) var(--origin-y, 1000%)\",\r\n                } as CSSProperties\r\n              }\r\n            >\r\n              <svg\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                viewBox=\"0 0 15 15\"\r\n                fill=\"none\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n              >\r\n                <path\r\n                  d=\"M7.5 0L9.08257 5.17647L13.5 7.5L9.08257 9.82353L7.5 15L5.91743 9.82353L1.5 7.5L5.91743 5.17647L7.5 0Z\"\r\n                  fill=\"hsl(260, 97%, 61%)\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SparkleButton\r\n",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": [
      "npx shadcn@latest add button"
    ]
  }
}