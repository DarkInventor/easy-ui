{
  "name": "create-new",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "create-new.tsx",
      "content": "\"use client\"\r\n\r\nimport React from \"react\"\r\nimport {\r\n  AnimatePresence,\r\n  MotionConfig,\r\n  motion,\r\n  type Transition,\r\n} from \"framer-motion\"\r\nimport { Plus, X } from \"lucide-react\"\r\n\r\nconst transition: Transition = { type: \"spring\", bounce: 0, duration: 0.4 }\r\n\r\nconst Context = React.createContext<{\r\n  status: string\r\n  setStatus: React.Dispatch<React.SetStateAction<string>>\r\n}>({ status: \"\", setStatus: () => null })\r\n\r\ninterface ActionItem {\r\n  link: string\r\n  icon: React.ReactNode\r\n  name: string\r\n}\r\n\r\ninterface InnerContentProps {\r\n  actions: ActionItem[]\r\n}\r\n\r\nfunction InnerContent({ actions }: InnerContentProps) {\r\n  const ctx = React.useContext(Context)\r\n  const isOpen = ctx.status === \"open\"\r\n  const isHovered = ctx.status === \"hovered\"\r\n\r\n  return (\r\n    <AnimatePresence>\r\n      {isOpen || isHovered ? (\r\n        <motion.div\r\n          layoutId=\"container\"\r\n          style={{ borderRadius: 22 }}\r\n          className=\"dark:bg-gray-900 bg-[#f7f6ef] tracking-tight text-[#6b6967] shadow-mixed ring-2 ring-black/[8%] dark:text-white dark:border dark:border-gray-800\"\r\n        >\r\n          <div className=\"flex w-full items-center justify-between py-2.5 pl-5 pr-2.5 \">\r\n            <motion.span layoutId=\"label\" className=\"relative\">\r\n              Create New\r\n            </motion.span>\r\n            <div className=\"relative \">\r\n              <AnimatePresence>\r\n                {isHovered && (\r\n                  <motion.p\r\n                    initial={{ opacity: 0, x: 10 }}\r\n                    animate={{ opacity: 1, x: 0 }}\r\n                    exit={{ opacity: 0, x: 10 }}\r\n                    className=\"absolute -left-11 top-0.5 text-sm text-[#6b6967]/70\"\r\n                  >\r\n                    Close\r\n                  </motion.p>\r\n                )}\r\n              </AnimatePresence>\r\n              <motion.button\r\n                layout\r\n                onClick={() => ctx.setStatus(\"idle\")}\r\n                initial={{ opacity: 0, x: -20, y: 10 }}\r\n                animate={{ opacity: 1, x: 0, y: 0 }}\r\n                exit={{ opacity: 0, x: -20, y: 10 }}\r\n                transition={{ ...transition, delay: 0.15 }}\r\n                whileTap={{\r\n                  scale: 0.9,\r\n                  transition: { ...transition, duration: 0.2 },\r\n                }}\r\n                onHoverStart={() => ctx.setStatus(\"hovered\")}\r\n                onHoverEnd={() => ctx.setStatus(\"open\")}\r\n                className=\"size-6 flex items-center justify-center rounded-full bg-[#b8b6af] dark:bg-transparent\"\r\n              >\r\n                <X\r\n                  strokeWidth={4}\r\n                  className=\"size-4 text-tight text-[#fafafa]\"\r\n                />\r\n              </motion.button>\r\n            </div>\r\n          </div>\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={\r\n              isHovered\r\n                ? { opacity: 1, scaleX: 0.95, scaleY: 0.92 }\r\n                : { opacity: 1 }\r\n            }\r\n            exit={{ opacity: 0 }}\r\n            className=\"flex flex-col gap-2.5 rounded-[22px] bg-[#fafafa] p-2.5 shadow-[0_-3px_3px_-1.5px_rgba(0,0,0,0.08)] ring-1 ring-black/[8%] dark:bg-black dark:text-white dark:border dark:border-gray-800\"\r\n          >\r\n            <div className=\"grid grid-cols-3 gap-2.5 text-[#b8b6af]\">\r\n              {actions.map((item, index) => (\r\n                <button\r\n                  key={index}\r\n                  onClick={() => {\r\n                    window.open(item.link, \"_blank\")\r\n                    ctx.setStatus(\"idle\")\r\n                  }}\r\n                  className=\"size-24 grid cursor-pointer place-items-center rounded-2xl bg-[#fefefe] transition duration-500 ease-in-out hover:bg-[#f6f4f0] dark:hover:bg-gray-700 hover:duration-200 active:scale-90 dark:bg-black  dark:shadow-xl dark:text-white dark:border dark:border-gray-900\"\r\n                >\r\n                  <div className=\"flex flex-col items-center gap-2 \">\r\n                    {item.icon}\r\n                    <p className=\"text-[#6b6967]\">{item.name}</p>\r\n                  </div>\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </motion.div>\r\n        </motion.div>\r\n      ) : (\r\n        <motion.button\r\n          layoutId=\"container\"\r\n          onClick={() => ctx.setStatus(\"open\")}\r\n          whileTap={{ scale: 0.95 }}\r\n          style={{ borderRadius: 22 }}\r\n          className=\"flex items-center gap-1.5 bg-[#fafafa] px-5 py-2.5 tracking-tight text-[#202020] shadow-mixed ring-1 ring-black/[8%] transition-[box-shadow,background-color] hover:bg-[#e0deda] active:shadow-none dark:bg-black dark:text-white dark:border dark:border-gray-700 dark:hover:bg-gray-800\"\r\n        >\r\n          {/* <motion.div\r\n            layout\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            transition={{ ...transition, delay: 0.05 }}\r\n          > */}\r\n          <Plus strokeWidth={1} />\r\n          Create New\r\n          {/* </motion.div> */}\r\n        </motion.button>\r\n      )}\r\n    </AnimatePresence>\r\n  )\r\n}\r\n\r\ninterface CreateNewComponentProps {\r\n  actions: ActionItem[]\r\n}\r\n\r\nexport default function CreateNewComponent({\r\n  actions,\r\n}: CreateNewComponentProps) {\r\n  const [status, setStatus] = React.useState(\"idle\")\r\n\r\n  React.useEffect(() => {\r\n    function handleEscape(e: KeyboardEvent) {\r\n      if (e.key === \"Escape\") {\r\n        setStatus(\"idle\")\r\n      }\r\n    }\r\n    window.addEventListener(\"keydown\", handleEscape)\r\n    return () => window.removeEventListener(\"keydown\", handleEscape)\r\n  }, [setStatus])\r\n\r\n  return (\r\n    <Context.Provider value={{ status, setStatus }}>\r\n      <MotionConfig transition={transition}>\r\n        <main className=\"relative flex h-auto items-center justify-center bg-[#fdfdfc] font-medium dark:bg-black\">\r\n          <InnerContent actions={actions} />\r\n        </main>\r\n      </MotionConfig>\r\n    </Context.Provider>\r\n  )\r\n}\r\n",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": []
  }
}