{
  "name": "signature-animation",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "lucide-react"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "signature-animation.tsx",
      "content": "\"use client\"\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport {\r\n  CheckIcon,\r\n  CopyIcon,\r\n  PaletteIcon,\r\n  PencilIcon,\r\n  RedoIcon,\r\n  UndoIcon,\r\n} from \"lucide-react\"\r\n\r\ninterface FontFamily {\r\n  name: string\r\n  value: string\r\n}\r\n\r\ninterface SignatureStyle {\r\n  name: string\r\n  value: string\r\n}\r\n\r\ninterface AdvancedSignatureCreatorProps {\r\n  initialName?: string\r\n  fontFamilies?: FontFamily[]\r\n  signatureStyles?: SignatureStyle[]\r\n  colors?: string[]\r\n  initialFontFamily?: string\r\n  initialSignatureStyle?: string\r\n  initialColor?: string\r\n  initialSize?: number\r\n  minSize?: number\r\n  maxSize?: number\r\n  placeholder?: string\r\n  signButtonText?: string\r\n  copiedText?: string\r\n  copyText?: string\r\n  signedByText?: string\r\n  onSign?: (signature: string) => void\r\n  onCopy?: (signature: string) => void\r\n  className?: string\r\n  showControls?: boolean\r\n  showColorPalette?: boolean\r\n  showFontSelector?: boolean\r\n  showStyleSelector?: boolean\r\n  showSizeSlider?: boolean\r\n  animationDuration?: number\r\n  undoLimit?: number\r\n  backgroundColor?: string\r\n  signButtonColor?: string\r\n  signButtonTextColor?: string\r\n}\r\n\r\nconst defaultFontFamilies: FontFamily[] = [\r\n  { name: \"Signature\", value: '\"Dancing Script\", cursive' },\r\n  { name: \"Classic\", value: '\"Great Vibes\", cursive' },\r\n  { name: \"Modern\", value: '\"Alex Brush\", cursive' },\r\n]\r\n\r\nconst defaultSignatureStyles: SignatureStyle[] = [\r\n  { name: \"No Underline\", value: \"none\" },\r\n  { name: \"Simple Underline\", value: \"simple\" },\r\n  { name: \"Wave Underline\", value: \"wave\" },\r\n]\r\n\r\nconst defaultColors = [\r\n  \"#000000\",\r\n  \"#0000FF\",\r\n  \"#006400\",\r\n  \"#8B0000\",\r\n  \"#4B0082\",\r\n  \"#ffffff\",\r\n]\r\n\r\nexport function AdvancedSignatureCreatorComponent({\r\n  initialName = \"\",\r\n  fontFamilies = defaultFontFamilies,\r\n  signatureStyles = defaultSignatureStyles,\r\n  colors = defaultColors,\r\n  initialFontFamily = defaultFontFamilies[0].value,\r\n  initialSignatureStyle = defaultSignatureStyles[0].value,\r\n  initialColor = defaultColors[1],\r\n  initialSize = 48,\r\n  minSize = 24,\r\n  maxSize = 72,\r\n  placeholder = \"Enter your name\",\r\n  signButtonText = \"SIGN\",\r\n  copiedText = \"Copied!\",\r\n  copyText = \"Copy Signature\",\r\n  signedByText = \"SIGNED BY,\",\r\n  onSign,\r\n  onCopy,\r\n  className = \"\",\r\n  showControls = true,\r\n  showColorPalette = true,\r\n  showFontSelector = true,\r\n  showStyleSelector = true,\r\n  showSizeSlider = true,\r\n  animationDuration = 2000,\r\n  undoLimit = 10,\r\n  backgroundColor = \"transparent\",\r\n  signButtonColor = \"black\",\r\n  signButtonTextColor = \"white\",\r\n}: AdvancedSignatureCreatorProps) {\r\n  const [name, setName] = useState(initialName)\r\n  const [isActive, setIsActive] = useState(initialName.length > 0)\r\n  const [isSigning, setIsSigning] = useState(false)\r\n  const [fontFamily, setFontFamily] = useState(initialFontFamily)\r\n  const [signatureStyle, setSignatureStyle] = useState(initialSignatureStyle)\r\n  const [color, setColor] = useState(initialColor)\r\n  const [size, setSize] = useState(initialSize)\r\n  const [history, setHistory] = useState<string[]>([initialName])\r\n  const [historyIndex, setHistoryIndex] = useState(0)\r\n  const [isCopied, setIsCopied] = useState(false)\r\n  const [isColorPaletteOpen, setIsColorPaletteOpen] = useState(false)\r\n  const signatureRef = useRef<SVGSVGElement>(null)\r\n  const colorPaletteRef = useRef<HTMLDivElement>(null)\r\n\r\n  useEffect(() => {\r\n    setIsActive(name.length > 0)\r\n  }, [name])\r\n\r\n  useEffect(() => {\r\n    if (name !== history[historyIndex]) {\r\n      setHistory((prev) =>\r\n        [...prev.slice(0, historyIndex + 1), name].slice(-undoLimit)\r\n      )\r\n      setHistoryIndex((prev) => Math.min(prev + 1, undoLimit - 1))\r\n    }\r\n  }, [name, fontFamily, signatureStyle, color, size, historyIndex, undoLimit])\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        colorPaletteRef.current &&\r\n        !colorPaletteRef.current.contains(event.target as Node)\r\n      ) {\r\n        setIsColorPaletteOpen(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside)\r\n    }\r\n  }, [])\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setName(event.target.value)\r\n  }\r\n\r\n  const handleSign = () => {\r\n    setIsSigning(true)\r\n    setTimeout(() => setIsSigning(false), 1000)\r\n    if (onSign) {\r\n      onSign(name)\r\n    }\r\n  }\r\n\r\n  const handleUndo = () => {\r\n    if (historyIndex > 0) {\r\n      setHistoryIndex((prev) => prev - 1)\r\n      setName(history[historyIndex - 1])\r\n    }\r\n  }\r\n\r\n  const handleRedo = () => {\r\n    if (historyIndex < history.length - 1) {\r\n      setHistoryIndex((prev) => prev + 1)\r\n      setName(history[historyIndex + 1])\r\n    }\r\n  }\r\n\r\n  const generateSignaturePath = () => {\r\n    const width = 300\r\n    const height = 80\r\n    let path = \"\"\r\n\r\n    switch (signatureStyle) {\r\n      case \"simple\":\r\n        path = `M10,${height} L${width - 10},${height}`\r\n        break\r\n      case \"wave\":\r\n        path = `M10,${height} Q${width / 4},${height - 10} ${\r\n          width / 2\r\n        },${height} T${width - 10},${height}`\r\n        break\r\n      default:\r\n        path = \"\"\r\n    }\r\n\r\n    return path\r\n  }\r\n\r\n  const copySignature = async () => {\r\n    if (!signatureRef.current) return\r\n\r\n    const svgData = new XMLSerializer().serializeToString(signatureRef.current)\r\n    const svgBlob = new Blob([svgData], { type: \"image/svg+xml;charset=utf-8\" })\r\n    const svgUrl = URL.createObjectURL(svgBlob)\r\n\r\n    const img = new Image()\r\n    img.onload = async () => {\r\n      const canvas = document.createElement(\"canvas\")\r\n      canvas.width = img.width\r\n      canvas.height = img.height\r\n      const ctx = canvas.getContext(\"2d\")\r\n      if (ctx) {\r\n        ctx.fillStyle = \"white\"\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n        ctx.drawImage(img, 0, 0)\r\n        const pngUrl = canvas.toDataURL(\"image/png\")\r\n\r\n        const htmlContent = `\r\n          <div style=\"font-family: ${fontFamily};\">\r\n            <img src=\"${pngUrl}\" alt=\"${name}'s signature\" style=\"max-width: 100%;\">\r\n          </div>\r\n        `\r\n\r\n        try {\r\n          await navigator.clipboard.write([\r\n            new ClipboardItem({\r\n              \"text/html\": new Blob([htmlContent], { type: \"text/html\" }),\r\n              \"text/plain\": new Blob([name], { type: \"text/plain\" }),\r\n            }),\r\n          ])\r\n          setIsCopied(true)\r\n          setTimeout(() => setIsCopied(false), 2000)\r\n          if (onCopy) {\r\n            onCopy(name)\r\n          }\r\n        } catch (err) {\r\n          console.error(\"Failed to copy: \", err)\r\n        }\r\n      }\r\n    }\r\n    img.src = svgUrl\r\n  }\r\n\r\n  const toggleColorPalette = () => {\r\n    setIsColorPaletteOpen((prev) => !prev)\r\n  }\r\n\r\n  const handleColorSelect = (selectedColor: string) => {\r\n    setColor(selectedColor)\r\n    setIsColorPaletteOpen(false)\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`flex min-h-screen items-center justify-center p-4 ${className}`}\r\n      style={{ backgroundColor }}\r\n    >\r\n      <div className=\"w-full max-w-[500px] rounded-2xl border bg-transparent p-6 shadow-xl backdrop-blur-xl dark:text-white md:p-8\">\r\n        {/* Input Container */}\r\n        <div className=\"relative mb-6\">\r\n          <div className=\"flex h-[60px] items-stretch overflow-hidden rounded-full border border-zinc-200/50 bg-zinc-100/80\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"flex-1 border-none bg-transparent px-4 font-sans text-lg text-black outline-none placeholder:text-zinc-400 dark:text-black md:px-6 md:text-xl\"\r\n              placeholder={placeholder}\r\n              value={name}\r\n              onChange={handleInputChange}\r\n              required\r\n            />\r\n            <button\r\n              onClick={handleSign}\r\n              className={`\r\n                m-2 flex items-center gap-0 rounded-full px-4 font-mono\r\n                text-sm tracking-wide text-black transition-all duration-300 dark:text-black md:px-6\r\n                ${\r\n                  isActive\r\n                    ? \"opacity-100 hover:opacity-80\"\r\n                    : \"cursor-not-allowed opacity-50\"\r\n                }\r\n                ${isSigning ? \"scale-95\" : \"\"}\r\n              `}\r\n              style={{\r\n                backgroundColor: signButtonColor,\r\n                color: signButtonTextColor,\r\n              }}\r\n              disabled={!isActive}\r\n            >\r\n              <PencilIcon className=\"size-4\" />\r\n              <span className=\"hidden md:inline\">{signButtonText}</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Controls */}\r\n        {showControls && (\r\n          <div className=\"mb-6 flex flex-wrap justify-between gap-2\">\r\n            <div className=\"flex gap-2\">\r\n              <button\r\n                onClick={handleUndo}\r\n                className=\"rounded-full bg-zinc-100 p-2 transition-colors hover:bg-zinc-200\"\r\n                title=\"Undo\"\r\n              >\r\n                <UndoIcon className=\"size-5 text-black dark:text-black\" />\r\n              </button>\r\n              <button\r\n                onClick={handleRedo}\r\n                className=\"rounded-full bg-zinc-100 p-2 transition-colors hover:bg-zinc-200\"\r\n                title=\"Redo\"\r\n              >\r\n                <RedoIcon className=\"size-5 text-black dark:text-black\" />\r\n              </button>\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              {showFontSelector && (\r\n                <select\r\n                  value={fontFamily}\r\n                  onChange={(e) => setFontFamily(e.target.value)}\r\n                  className=\"rounded-full bg-zinc-100 p-2 text-black transition-colors hover:bg-zinc-200 dark:text-black\"\r\n                  title=\"Font Family\"\r\n                >\r\n                  {fontFamilies.map((font) => (\r\n                    <option key={font.name} value={font.value}>\r\n                      {font.name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              )}\r\n              {showStyleSelector && (\r\n                <select\r\n                  value={signatureStyle}\r\n                  onChange={(e) => setSignatureStyle(e.target.value)}\r\n                  className=\"rounded-full bg-zinc-100 p-2 text-black transition-colors hover:bg-zinc-200 dark:text-black\"\r\n                  title=\"Signature Style\"\r\n                >\r\n                  {signatureStyles.map((style) => (\r\n                    <option key={style.name} value={style.value}>\r\n                      {style.name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              )}\r\n              {showColorPalette && (\r\n                <div className=\"relative\" ref={colorPaletteRef}>\r\n                  <button\r\n                    onClick={toggleColorPalette}\r\n                    className=\"rounded-full bg-zinc-100 p-2 transition-colors hover:bg-zinc-200\"\r\n                    title=\"Signature Color\"\r\n                  >\r\n                    <PaletteIcon className=\"size-5 text-black dark:text-black\" />\r\n                  </button>\r\n                  {isColorPaletteOpen && (\r\n                    <div className=\"absolute right-0 top-full z-10 mt-2 flex gap-2 rounded-lg bg-white p-2 shadow-lg\">\r\n                      {colors.map((c) => (\r\n                        <button\r\n                          key={c}\r\n                          onClick={() => handleColorSelect(c)}\r\n                          className=\"size-6 rounded-full\"\r\n                          style={{ backgroundColor: c }}\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Signature Preview */}\r\n        <div\r\n          className={`transition-all duration-500 ${\r\n            isActive ? \"translate-y-0 opacity-100\" : \"translate-y-4 opacity-0\"\r\n          }`}\r\n        >\r\n          <div className=\"mb-4 font-mono text-sm tracking-wide text-zinc-400 \">\r\n            {signedByText}\r\n          </div>\r\n          <div className=\"signature-container relative \">\r\n            <svg\r\n              ref={signatureRef}\r\n              viewBox=\"0 0 300 100\"\r\n              className=\"h-24 w-full\"\r\n            >\r\n              <text\r\n                x=\"10\"\r\n                y=\"60\"\r\n                fontFamily={fontFamily}\r\n                fontSize={size}\r\n                fill={color}\r\n                className=\"signature-text\"\r\n              >\r\n                {name}\r\n              </text>\r\n              <path\r\n                d={generateSignaturePath()}\r\n                fill=\"none\"\r\n                stroke={color}\r\n                strokeWidth=\"2\"\r\n                className=\"signature-path\"\r\n                transform=\"translate(0, 20)\"\r\n              />\r\n            </svg>\r\n            {showSizeSlider && (\r\n              <input\r\n                type=\"range\"\r\n                min={minSize}\r\n                max={maxSize}\r\n                value={size}\r\n                onChange={(e) => setSize(Number(e.target.value))}\r\n                className=\"absolute bottom-0 left-0 w-full bg-transparent py-20 hover:bg-transparent\"\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Copy Button */}\r\n        <div className=\"mt-8 flex justify-end\">\r\n          <button\r\n            onClick={copySignature}\r\n            className={`\r\n              flex items-center gap-2 rounded-full bg-black px-4 py-2 text-white \r\n              transition-colors hover:bg-zinc-800\r\n              ${isCopied ? \"bg-green-500 hover:bg-green-600\" : \"\"}\r\n            `}\r\n          >\r\n            {isCopied ? (\r\n              <>\r\n                <CheckIcon className=\"size-4\" />\r\n                {copiedText}\r\n              </>\r\n            ) : (\r\n              <>\r\n                <CopyIcon className=\"size-4\" />\r\n                {copyText}\r\n              </>\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <style jsx global>{`\r\n        @import url(\"https://fonts.googleapis.com/css2?family=Dancing+Script:wght@600&family=Great+Vibes&family=Alex+Brush&display=swap\");\r\n\r\n        .signature-path {\r\n          stroke-dasharray: 1000;\r\n          stroke-dashoffset: 1000;\r\n          animation: sign ${animationDuration}ms forwards\r\n            cubic-bezier(0.4, 0, 0.2, 1);\r\n        }\r\n\r\n        .signature-text {\r\n          opacity: 0;\r\n          animation: fadeIn ${animationDuration / 2}ms forwards\r\n            ${animationDuration / 4}ms;\r\n        }\r\n\r\n        @keyframes sign {\r\n          to {\r\n            stroke-dashoffset: 0;\r\n          }\r\n        }\r\n\r\n        @keyframes fadeIn {\r\n          to {\r\n            opacity: 1;\r\n          }\r\n        }\r\n\r\n        .signature-container {\r\n          position: relative;\r\n          overflow: hidden;\r\n        }\r\n\r\n        input[type=\"range\"] {\r\n          -webkit-appearance: none;\r\n          appearance: none;\r\n          width: 100%;\r\n          height: 2px;\r\n          background: #ddd;\r\n          outline: none;\r\n          opacity: 0;\r\n          transition: opacity 0.2s;\r\n        }\r\n\r\n        .signature-container:hover input[type=\"range\"] {\r\n          opacity: 1;\r\n        }\r\n\r\n        input[type=\"range\"]::-webkit-slider-thumb {\r\n          -webkit-appearance: none;\r\n          appearance: none;\r\n          width: 12px;\r\n          height: 12px;\r\n          background: #000;\r\n          cursor: pointer;\r\n          border-radius: 50%;\r\n        }\r\n\r\n        input[type=\"range\"]::-moz-range-thumb {\r\n          width: 12px;\r\n          height: 12px;\r\n          background: #000;\r\n          cursor: pointer;\r\n          border-radius: 50%;\r\n        }\r\n      `}</style>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": []
  }
}