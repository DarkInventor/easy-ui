{
  "name": "transaction-list",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "transaction-list.tsx",
      "content": "\"use client\"\r\n\r\nimport { useState, type ReactNode } from \"react\"\r\nimport { motion, AnimatePresence } from \"framer-motion\"\r\nimport { X, ChevronRight } from \"lucide-react\"\r\n\r\ninterface Transaction {\r\n  id: string\r\n  icon: ReactNode\r\n  title: string\r\n  subtitle: string\r\n  amount: string\r\n  transactionId: string\r\n  date: string\r\n  time: string\r\n  paymentMethod: string\r\n  paymentInfo: string\r\n}\r\n\r\ninterface TransactionListProps {\r\n  transactions: Transaction[]\r\n  title?: string\r\n  maxHeight?: string\r\n  showAllTransactionsButton?: boolean\r\n  onAllTransactionsClick?: () => void\r\n  className?: string\r\n  containerClassName?: string\r\n  headerClassName?: string\r\n  transactionClassName?: string\r\n  iconClassName?: string\r\n  titleClassName?: string\r\n  subtitleClassName?: string\r\n  amountClassName?: string\r\n  allTransactionsButtonClassName?: string\r\n  popupClassName?: string\r\n  popupHeaderClassName?: string\r\n  popupCloseButtonClassName?: string\r\n  popupContentClassName?: string\r\n  popupIconClassName?: string\r\n  popupTitleClassName?: string\r\n  popupSubtitleClassName?: string\r\n  popupAmountClassName?: string\r\n  popupDetailsClassName?: string\r\n  renderPopupContent?: (transaction: Transaction) => ReactNode\r\n}\r\n\r\nfunction TransactionPopup({\r\n  transaction,\r\n  onClose,\r\n  className,\r\n  headerClassName,\r\n  closeButtonClassName,\r\n  contentClassName,\r\n  iconClassName,\r\n  titleClassName,\r\n  subtitleClassName,\r\n  amountClassName,\r\n  detailsClassName,\r\n  renderContent,\r\n}: {\r\n  transaction: Transaction | null\r\n  onClose: () => void\r\n  className?: string\r\n  headerClassName?: string\r\n  closeButtonClassName?: string\r\n  contentClassName?: string\r\n  iconClassName?: string\r\n  titleClassName?: string\r\n  subtitleClassName?: string\r\n  amountClassName?: string\r\n  detailsClassName?: string\r\n  renderContent?: (transaction: Transaction) => ReactNode\r\n}) {\r\n  if (!transaction) return null\r\n\r\n  return (\r\n    <motion.div\r\n      className=\"fixed inset-0 bg-black/50 dark:bg-white/10 backdrop-blur-sm flex items-center justify-center p-4 z-50 \"\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      exit={{ opacity: 0 }}\r\n    >\r\n      <motion.div\r\n        className={`bg-white dark:bg-black text-black dark:text-white rounded-[1rem] p-6 w-full max-w-md mx-4 shadow-xl ${className}`}\r\n        initial={{ scale: 0.9, opacity: 0 }}\r\n        animate={{ scale: 1, opacity: 1 }}\r\n        exit={{ scale: 0.9, opacity: 0 }}\r\n        transition={{ type: \"spring\", damping: 25, stiffness: 300 }}\r\n      >\r\n        {renderContent ? (\r\n          renderContent(transaction)\r\n        ) : (\r\n          <>\r\n            <div className={`flex justify-between items-center mb-6 ${headerClassName} `}>\r\n              <h2 className=\"text-2xl font-semibold\">Transaction Details</h2>\r\n              <button\r\n                onClick={onClose}\r\n                className={`text-black hover:text-gray-700 dark:text-white dark:hover:text-gray-300 ${closeButtonClassName}`}\r\n              >\r\n                <X className=\"w-6 h-6\" />\r\n              </button>\r\n            </div>\r\n            <div className={`space-y-6 ${contentClassName} `}>\r\n              <div className=\"flex items-center gap-4\">\r\n                <div\r\n                  className={`icon w-14 h-14 bg-background border text-black dark:bg-white dark:text-black rounded-2xl grid place-items-center flex-shrink-0 ${iconClassName}`}\r\n                >\r\n                  {transaction.icon}\r\n                </div>\r\n                <div>\r\n                  <div className={`font-medium text-lg ${titleClassName}`}>{transaction.title}</div>\r\n                  <div className={`text-sm text-gray-600 dark:text-gray-400 ${subtitleClassName}`}>\r\n                    {transaction.subtitle}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className={`text-3xl font-bold ml-5 tracking-tight leading-7 ${amountClassName}`}>{transaction.amount}</div>\r\n              <div className={`space-y-2 text-base dark:text-gray-200 ml-5 ${detailsClassName}`}>\r\n                <p>Transaction ID: {transaction.transactionId}</p>\r\n                <p>Date: {transaction.date}</p>\r\n                <p>Time: {transaction.time}</p>\r\n                <p>{transaction.paymentMethod}</p>\r\n                <p>{transaction.paymentInfo}</p>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </motion.div>\r\n    </motion.div>\r\n  )\r\n}\r\n\r\nexport function TransactionListCard({\r\n  transactions,\r\n  title = \"Transactions\",\r\n  maxHeight = \"none\",\r\n  showAllTransactionsButton = true,\r\n  onAllTransactionsClick = () => {},\r\n  className = \"\",\r\n  containerClassName = \"\",\r\n  headerClassName = \"\",\r\n  transactionClassName = \"\",\r\n  iconClassName = \"\",\r\n  titleClassName = \"\",\r\n  subtitleClassName = \"\",\r\n  amountClassName = \"\",\r\n  allTransactionsButtonClassName = \"\",\r\n  popupClassName = \"\",\r\n  popupHeaderClassName = \"\",\r\n  popupCloseButtonClassName = \"\",\r\n  popupContentClassName = \"\",\r\n  popupIconClassName = \"\",\r\n  popupTitleClassName = \"\",\r\n  popupSubtitleClassName = \"\",\r\n  popupAmountClassName = \"\",\r\n  popupDetailsClassName = \"\",\r\n  renderPopupContent,\r\n}: TransactionListProps) {\r\n  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null)\r\n\r\n  const handleTransactionClick = (transaction: Transaction) => {\r\n    if (typeof document.startViewTransition === \"function\") {\r\n      document.startViewTransition(() => {\r\n        setSelectedTransaction(transaction)\r\n      })\r\n    } else {\r\n      setSelectedTransaction(transaction)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`container bg-white dark:bg-background text-black dark:text-white rounded-2xl p-6 w-full max-w-[400px] mx-auto border border-gray-200 dark:border-gray-900 ${className} ${containerClassName}`}\r\n    >\r\n      <h2 className={`text-2xl font-bold mb-6 ml-5 ${headerClassName}`}>{title}</h2>\r\n      <div className=\"space-y-4\" style={{ maxHeight, overflowY: \"auto\" }}>\r\n        <AnimatePresence>\r\n          {transactions.map((transaction) => (\r\n            <motion.div\r\n              key={transaction.id}\r\n              className={`flex items-center gap-4 p-4 rounded-2xl cursor-pointer hover:bg-gray-100 dark:hover:bg-opacity-10 transition-colors duration-200 ${transactionClassName}`}\r\n              onClick={() => handleTransactionClick(transaction)}\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              exit={{ opacity: 0, y: -20 }}\r\n              transition={{ duration: 0.3 }}\r\n            >\r\n              <div\r\n                className={`icon w-12 h-12 bg-background border text-white dark:bg-white dark:text-black rounded-2xl grid place-items-center flex-shrink-0 ${iconClassName}`}\r\n              >\r\n                {transaction.icon}\r\n              </div>\r\n              <div className=\"flex-grow\">\r\n                <div className={`font-medium ${titleClassName}`}>{transaction.title}</div>\r\n                <div className={`text-sm text-gray-600 dark:text-gray-400 ${subtitleClassName}`}>\r\n                  {transaction.subtitle}\r\n                </div>\r\n              </div>\r\n              <div className={`font-medium ${amountClassName}`}>{transaction.amount}</div>\r\n            </motion.div>\r\n          ))}\r\n        </AnimatePresence>\r\n      </div>\r\n      {showAllTransactionsButton && (\r\n        <button\r\n          onClick={onAllTransactionsClick}\r\n          className={`w-full mt-6 py-2 text-center font-medium bg-background rounded-2xl  flex items-center justify-center ${allTransactionsButtonClassName}`}\r\n        >\r\n          All Transactions\r\n          <ChevronRight className=\"ml-2 w-5 h-5\" />\r\n        </button>\r\n      )}\r\n      <AnimatePresence>\r\n        {selectedTransaction && (\r\n          <TransactionPopup\r\n            transaction={selectedTransaction}\r\n            onClose={() => setSelectedTransaction(null)}\r\n            className={popupClassName}\r\n            headerClassName={popupHeaderClassName}\r\n            closeButtonClassName={popupCloseButtonClassName}\r\n            contentClassName={popupContentClassName}\r\n            iconClassName={popupIconClassName}\r\n            titleClassName={popupTitleClassName}\r\n            subtitleClassName={popupSubtitleClassName}\r\n            amountClassName={popupAmountClassName}\r\n            detailsClassName={popupDetailsClassName}\r\n            renderContent={renderPopupContent}\r\n          />\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  )\r\n}\r\n\r\n",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": []
  }
}