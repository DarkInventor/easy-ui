{
  "name": "animated-beam",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "framer-motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "animated-beam.tsx",
      "content": "'use client';\r\n\r\nimport React, { forwardRef, useRef, useEffect, useId, useState, RefObject } from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\n// Utility function for class names\r\nconst cn = (...classes: (string | undefined)[]) => classes.filter(Boolean).join(' ');\r\n\r\n// Icons object with SVG logos\r\nconst Icons = {\r\n  image1: () => (\r\n    <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n      <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\" />\r\n      <circle cx=\"12\" cy=\"7\" r=\"4\" />\r\n    </svg>\r\n  ),\r\n  image2: () => (\r\n    <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n      <polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\" />\r\n    </svg>\r\n  ),\r\n  image3: () => (\r\n    <svg viewBox=\"0 0 24 24\" fill=\"none\">\r\n      <path d=\"M3 3h18v18H3V3z\" fill=\"#3178C6\" />\r\n      <path d=\"M17.2 15.2v2.4c.4.2.7.4 1.2.5.4.1.9.2 1.4.2.5 0 .9-.1 1.3-.2.4-.1.7-.3 1-.6.3-.2.5-.5.6-.9.1-.3.2-.7.2-1.1 0-.3 0-.6-.1-.9-.1-.2-.2-.5-.4-.7-.2-.2-.4-.4-.7-.6-.3-.2-.6-.4-1-.6-.3-.2-.6-.3-.8-.4-.2-.1-.4-.3-.6-.4-.1-.1-.2-.3-.3-.4 0-.2-.1-.3-.1-.5 0-.2 0-.3.1-.5.1-.1.2-.2.3-.3.1-.1.3-.2.5-.2.2-.1.4-.1.7-.1.2 0 .4 0 .6.1.2 0 .4.1.6.2.2.1.4.2.6.3.2.1.4.2.6.4v-2.2c-.3-.1-.7-.2-1-.3-.4-.1-.8-.1-1.3-.1-.5 0-.9.1-1.3.2-.4.1-.8.3-1.1.6-.3.2-.5.5-.7.9-.2.4-.3.8-.3 1.3 0 .7.2 1.3.6 1.8.4.5 1 .9 1.8 1.3.3.2.6.3.9.5.3.1.5.3.6.4.2.1.3.3.3.4.1.1.1.3.1.4 0 .1 0 .3-.1.4-.1.1-.1.2-.3.3-.1.1-.3.1-.4.2-.2 0-.4.1-.6.1-.5 0-1-.1-1.5-.3-.4 0-.9-.3-1.3-.6zm-4.8-3.3h2.9v-2h-8.1v2h2.9v8.2h2.3v-8.2z\" fill=\"#fff\" />\r\n    </svg>\r\n  ),\r\n  image4: () => (\r\n    <svg viewBox=\"0 0 24 24\" fill=\"none\">\r\n      <path d=\"M12 6C9.33 6 7.67 7.33 7 10C8 8.67 9.17 8.17 10.5 8.5C11.26 8.69 11.81 9.24 12.41 9.85C13.39 10.85 14.5 12 17 12C19.67 12 21.33 10.67 22 8C21 9.33 19.83 9.83 18.5 9.5C17.74 9.31 17.19 8.76 16.59 8.15C15.61 7.15 14.5 6 12 6ZM7 12C4.33 12 2.67 13.33 2 16C3 14.67 4.17 14.17 5.5 14.5C6.26 14.69 6.81 15.24 7.41 15.85C8.39 16.85 9.5 18 12 18C14.67 18 16.33 16.67 17 14C16 15.33 14.83 15.83 13.5 15.5C12.74 15.31 12.19 14.76 11.59 14.15C10.61 13.15 9.5 12 7 12Z\" fill=\"#06B6D4\" />\r\n    </svg>\r\n  ),\r\n  image5: () => (\r\n    <svg viewBox=\"0 0 24 24\" fill=\"none\">\r\n      <path d=\"M11.572 0c-.176 0-.31.001-.358.007a19.76 19.76 0 0 1-.364.033C7.443.346 4.25 2.185 2.228 5.012a11.875 11.875 0 0 0-2.119 5.243c-.096.659-.108.854-.108 1.747s.012 1.089.108 1.748c.652 4.506 3.86 8.292 8.209 9.695.779.25 1.6.422 2.534.525.363.04 1.935.04 2.299 0 1.611-.178 2.977-.577 4.323-1.264.207-.106.247-.134.219-.158-.02-.013-.9-1.193-1.955-2.62l-1.919-2.592-2.404-3.558a338.739 338.739 0 0 0-2.422-3.556c-.009-.002-.018 1.579-.023 3.51-.007 3.38-.01 3.515-.052 3.595a.426.426 0 0 1-.206.214c-.075.037-.14.044-.495.044H7.81l-.108-.068a.438.438 0 0 1-.157-.171l-.05-.106.006-4.703.007-4.705.072-.092a.645.645 0 0 1 .174-.143c.096-.047.134-.051.54-.051.478 0 .558.018.682.154.035.038 1.337 1.999 2.895 4.361a10760.433 10760.433 0 0 0 4.735 7.17l1.9 2.879.096-.063a12.317 12.317 0 0 0 2.466-2.163 11.944 11.944 0 0 0 2.824-6.134c.096-.66.108-.854.108-1.748 0-.893-.012-1.088-.108-1.747-.652-4.506-3.859-8.292-8.208-9.695a12.597 12.597 0 0 0-2.499-.523A33.119 33.119 0 0 0 11.573 0zm4.069 7.217c.347 0 .408.005.486.047a.473.473 0 0 1 .237.277c.018.06.023 1.365.018 4.304l-.006 4.218-.744-1.14-.746-1.14v-3.066c0-1.982.01-3.097.023-3.15a.478.478 0 0 1 .233-.296c.096-.05.13-.054.5-.054z\" fill=\"#000\" />\r\n    </svg>\r\n  ),\r\n  image6: () => (\r\n    <svg viewBox=\"0 0 24 24\" fill=\"none\">\r\n      <path d=\"M12 13.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z\" fill=\"#61DAFB\" />\r\n      <path d=\"M12 9.86c-4.08 0-7.72 1.88-9.64 4.64C4.28 17.26 7.92 19.14 12 19.14c4.08 0 7.72-1.88 9.64-4.64-1.92-2.76-5.56-4.64-9.64-4.64zm0 8.28c-3.36 0-6.36-1.48-8-3.64 1.64-2.16 4.64-3.64 8-3.64s6.36 1.48 8 3.64c-1.64 2.16-4.64 3.64-8 3.64z\" fill=\"#61DAFB\" />\r\n      <path d=\"M12 4.5c-4.08 0-7.72 1.88-9.64 4.64C4.28 11.9 7.92 13.78 12 13.78c4.08 0 7.72-1.88 9.64-4.64C19.72 6.38 16.08 4.5 12 4.5zm0 8.28c-3.36 0-6.36-1.48-8-3.64 1.64-2.16 4.64-3.64 8-3.64s6.36 1.48 8 3.64c-1.64 2.16-4.64 3.64-8 3.64z\" fill=\"#61DAFB\" />\r\n    </svg>\r\n  ),\r\n  image7: () => (\r\n    <svg viewBox=\"0 0 24 24\" fill=\"none\">\r\n      <path d=\"M4 0h16v8h-8zM4 8h8l8 8H4zM4 16h8v8z\" fill=\"#0055FF\" />\r\n    </svg>\r\n  ),\r\n};\r\n\r\n// AnimatedBeam component\r\ninterface AnimatedBeamProps {\r\n  className?: string;\r\n  containerRef: RefObject<HTMLElement>;\r\n  fromRef: RefObject<HTMLElement>;\r\n  toRef: RefObject<HTMLElement>;\r\n  curvature?: number;\r\n  reverse?: boolean;\r\n  pathColor?: string;\r\n  pathWidth?: number;\r\n  pathOpacity?: number;\r\n  gradientStartColor?: string;\r\n  gradientStopColor?: string;\r\n  delay?: number;\r\n  duration?: number;\r\n  startXOffset?: number;\r\n  startYOffset?: number;\r\n  endXOffset?: number;\r\n  endYOffset?: number;\r\n  dotted?: boolean;\r\n  dotSpacing?: number;\r\n}\r\n\r\nconst AnimatedBeam: React.FC<AnimatedBeamProps> = ({\r\n  className,\r\n  containerRef,\r\n  fromRef,\r\n  toRef,\r\n  curvature = 0,\r\n  reverse = false,\r\n  duration = Math.random() * 3 + 4,\r\n  delay = 0,\r\n  pathColor = 'gray',\r\n  pathWidth = 2,\r\n  pathOpacity = 0.2,\r\n  gradientStartColor = '#4d40ff',\r\n  gradientStopColor = '#4043ff',\r\n  startXOffset = 0,\r\n  startYOffset = 0,\r\n  endXOffset = 0,\r\n  endYOffset = 0,\r\n  dotted = false,\r\n  dotSpacing = 6,\r\n}) => {\r\n  const id = useId();\r\n  const [pathD, setPathD] = useState('');\r\n  const [svgDimensions, setSvgDimensions] = useState({ width: 0, height: 0 });\r\n  const strokeDasharray = dotted ? `${dotSpacing} ${dotSpacing}` : 'none';\r\n  const gradientCoordinates = reverse\r\n    ? {\r\n        x1: ['90%', '-10%'],\r\n        x2: ['100%', '0%'],\r\n        y1: ['0%', '0%'],\r\n        y2: ['0%', '0%'],\r\n      }\r\n    : {\r\n        x1: ['10%', '110%'],\r\n        x2: ['0%', '100%'],\r\n        y1: ['0%', '0%'],\r\n        y2: ['0%', '0%'],\r\n      };\r\n\r\n  useEffect(() => {\r\n    const updatePath = () => {\r\n      if (containerRef.current && fromRef.current && toRef.current) {\r\n        const containerRect = containerRef.current.getBoundingClientRect();\r\n        const rectA = fromRef.current.getBoundingClientRect();\r\n        const rectB = toRef.current.getBoundingClientRect();\r\n\r\n        const svgWidth = containerRect.width;\r\n        const svgHeight = containerRect.height;\r\n        setSvgDimensions({ width: svgWidth, height: svgHeight });\r\n\r\n        const startX = rectA.left - containerRect.left + rectA.width / 2 + startXOffset;\r\n        const startY = rectA.top - containerRect.top + rectA.height / 2 + startYOffset;\r\n        const endX = rectB.left - containerRect.left + rectB.width / 2 + endXOffset;\r\n        const endY = rectB.top - containerRect.top + rectB.height / 2 + endYOffset;\r\n\r\n        const controlY = startY - curvature;\r\n        const d = `M ${startX},${startY} Q ${(startX + endX) / 2},${controlY} ${endX},${endY}`;\r\n        setPathD(d);\r\n      }\r\n    };\r\n\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      updatePath();\r\n    });\r\n\r\n    if (containerRef.current) {\r\n      resizeObserver.observe(containerRef.current);\r\n    }\r\n\r\n    updatePath();\r\n\r\n    return () => {\r\n      resizeObserver.disconnect();\r\n    };\r\n  }, [containerRef, fromRef, toRef, curvature, startXOffset, startYOffset, endXOffset, endYOffset]);\r\n\r\n  return (\r\n    <svg\r\n      fill='none'\r\n      width={svgDimensions.width}\r\n      height={svgDimensions.height}\r\n      xmlns='http://www.w3.org/2000/svg'\r\n      className={cn('pointer-events-none absolute left-0 top-0 transform-gpu stroke-2', className)}\r\n      viewBox={`0 0 ${svgDimensions.width} ${svgDimensions.height}`}\r\n    >\r\n      <path\r\n        d={pathD}\r\n        stroke={pathColor}\r\n        strokeWidth={pathWidth}\r\n        strokeOpacity={pathOpacity}\r\n        strokeLinecap='round'\r\n        strokeDasharray={strokeDasharray}\r\n      />\r\n      <motion.path\r\n        d={pathD}\r\n        stroke={`url(#${id})`}\r\n        strokeLinecap='round'\r\n        strokeDasharray={strokeDasharray}\r\n        initial={{\r\n          strokeWidth: pathWidth,\r\n          strokeOpacity: 0,\r\n        }}\r\n        animate={{\r\n          strokeWidth: pathWidth * 1.5,\r\n          strokeOpacity: 1,\r\n        }}\r\n        transition={{\r\n          duration: 2,\r\n          delay: delay,\r\n        }}\r\n      />\r\n      <defs>\r\n        <motion.linearGradient className='transform-gpu'\r\n          id={id}\r\n          gradientUnits={'userSpaceOnUse'}\r\n          initial={{\r\n            x1: '0%',\r\n            x2: '0%',\r\n            y1: '0%',\r\n            y2: '0%',\r\n          }}\r\n          animate={{\r\n            x1: gradientCoordinates.x1,\r\n            x2: gradientCoordinates.x2,\r\n            y1: gradientCoordinates.y1,\r\n            y2: gradientCoordinates.y2,\r\n          }}\r\n          transition={{\r\n            delay,\r\n            duration,\r\n            ease: [0.16, 1, 0.3, 1],\r\n            repeat: Infinity,\r\n            repeatDelay: 0,\r\n          }}\r\n        >\r\n          <stop stopColor={gradientStartColor} stopOpacity='0'></stop>\r\n          <stop stopColor={gradientStartColor}></stop>\r\n          <stop offset='32.5%' stopColor={gradientStopColor}></stop>\r\n          <stop offset='100%' stopColor={gradientStopColor} stopOpacity='0'></stop>\r\n        </motion.linearGradient>\r\n      </defs>\r\n    </svg>\r\n  );\r\n};\r\n\r\n// Circle component with responsive sizing\r\nconst Circle = forwardRef<HTMLDivElement, { className?: string; children?: React.ReactNode }>(\r\n  ({ className, children }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          'z-10 flex items-center justify-center rounded-full border-2 bg-white dark:bg-gray-300 shadow-[0_0_20px_-12px_rgba(0,0,0,0.8)]',\r\n          'w-8 h-8 p-2 sm:w-10 sm:h-10 sm:p-2.5 md:w-12 md:h-12 md:p-3', // Responsive sizes\r\n          className\r\n        )}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nCircle.displayName = 'Circle';\r\n\r\n// Main AnimatedBeamDemo component with responsive layout\r\ninterface AnimatedBeamDemoProps {\r\n  className?: string;\r\n  icons?: typeof Icons;\r\n  beamColor?: string;\r\n  beamSpeed?: number;\r\n}\r\n\r\nexport const AnimatedBeamDemo: React.FC<AnimatedBeamDemoProps> = ({ \r\n  className, \r\n  icons = Icons, \r\n  beamColor = '#4d40ff', \r\n  beamSpeed = 3 \r\n}) => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const div1Ref = useRef<HTMLDivElement>(null);\r\n  const div2Ref = useRef<HTMLDivElement>(null);\r\n  const div3Ref = useRef<HTMLDivElement>(null);\r\n  const div4Ref = useRef<HTMLDivElement>(null);\r\n  const div5Ref = useRef<HTMLDivElement>(null);\r\n  const div6Ref = useRef<HTMLDivElement>(null);\r\n  const div7Ref = useRef<HTMLDivElement>(null);\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'relative flex w-full max-w-[500px] mx-auto items-center justify-center overflow-hidden rounded-lg border bg-background',\r\n        'p-4 sm:p-6 md:p-10 md:shadow-xl', // Responsive padding\r\n        className\r\n      )}\r\n      ref={containerRef}\r\n    >\r\n      <div className='flex h-full w-full flex-row items-stretch justify-between gap-3 sm:gap-6 md:gap-10'>\r\n        <div className='flex flex-col justify-center'>\r\n          <Circle ref={div7Ref}>\r\n            {icons.image1()}\r\n          </Circle>\r\n        </div>\r\n        <div className='flex flex-col justify-center'>\r\n          <Circle \r\n            ref={div6Ref} \r\n            className='w-10 h-10 sm:w-12 sm:h-12 md:w-14 md:h-14' // Larger circle with responsive sizing\r\n          >\r\n            {icons.image2()}\r\n          </Circle>\r\n        </div>\r\n        <div className='flex flex-col justify-center gap-1 sm:gap-1.5 md:gap-2'>\r\n          <Circle ref={div1Ref}>\r\n            {icons.image3()}\r\n          </Circle>\r\n          <Circle ref={div2Ref}>\r\n            {icons.image4()}\r\n          </Circle>\r\n          <Circle ref={div3Ref}>\r\n            {icons.image5()}\r\n          </Circle>\r\n          <Circle ref={div4Ref}>\r\n            {icons.image6()}\r\n          </Circle>\r\n          <Circle ref={div5Ref}>\r\n            {icons.image7()}\r\n          </Circle>\r\n        </div>\r\n      </div>\r\n\r\n      <AnimatedBeam containerRef={containerRef} fromRef={div1Ref} toRef={div6Ref} duration={beamSpeed} gradientStartColor={beamColor} gradientStopColor={beamColor} />\r\n      <AnimatedBeam containerRef={containerRef} fromRef={div2Ref} toRef={div6Ref} duration={beamSpeed} gradientStartColor={beamColor} gradientStopColor={beamColor} />\r\n      <AnimatedBeam containerRef={containerRef} fromRef={div3Ref} toRef={div6Ref} duration={beamSpeed} gradientStartColor={beamColor} gradientStopColor={beamColor} />\r\n      <AnimatedBeam containerRef={containerRef} fromRef={div4Ref} toRef={div6Ref} duration={beamSpeed} gradientStartColor={beamColor} gradientStopColor={beamColor} />\r\n      <AnimatedBeam containerRef={containerRef} fromRef={div5Ref} toRef={div6Ref} duration={beamSpeed} gradientStartColor={beamColor} gradientStopColor={beamColor} />\r\n      <AnimatedBeam containerRef={containerRef} fromRef={div6Ref} toRef={div7Ref} duration={beamSpeed} gradientStartColor={beamColor} gradientStopColor={beamColor} />\r\n    </div>\r\n  );\r\n};",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": []
  }
}