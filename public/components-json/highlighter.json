{
  "name": "highlighter",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "rough-notation"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "highlighter.tsx",
      "content": "\"use client\";\r\n\r\nimport { useEffect, useRef } from \"react\";\r\nimport { annotate } from \"rough-notation\";\r\nimport type React from \"react\";\r\n\r\n// Define available annotation actions\r\ntype AnnotationAction =\r\n  | \"highlight\"\r\n  | \"underline\"\r\n  | \"box\"\r\n  | \"circle\"\r\n  | \"strike-through\"\r\n  | \"crossed-off\"\r\n  | \"bracket\";\r\n\r\n// Custom TypeScript interface for supported props\r\ninterface HighlighterProps {\r\n  children: React.ReactNode;\r\n  action?: AnnotationAction;\r\n  color?: string;\r\n  strokeWidth?: number;\r\n  animationDuration?: number;\r\n  iterations?: number;\r\n  padding?: number;\r\n  multiline?: boolean;\r\n}\r\n\r\nexport default function Highlighter({\r\n  children,\r\n  action = \"highlight\",\r\n  color = \"#ffd1dc\", // Default pink color\r\n  strokeWidth = 1.5,\r\n  animationDuration = 600,\r\n  iterations = 2,\r\n  padding = 2,\r\n  multiline = true,\r\n}: HighlighterProps) {\r\n  const elementRef = useRef<HTMLSpanElement>(null);\r\n\r\n  useEffect(() => {\r\n    const element = elementRef.current;\r\n    if (element) {\r\n      const annotation = annotate(element, {\r\n        type: action,\r\n        color,\r\n        strokeWidth,\r\n        animationDuration,\r\n        iterations,\r\n        padding,\r\n        multiline,\r\n      });\r\n\r\n      annotation.show();\r\n\r\n      // Store the current element in closure for cleanup\r\n      return () => {\r\n        if (element) {\r\n          annotate(element, { type: action }).remove();\r\n        }\r\n      };\r\n    }\r\n  }, [\r\n    action,\r\n    color,\r\n    strokeWidth,\r\n    animationDuration,\r\n    iterations,\r\n    padding,\r\n    multiline,\r\n  ]);\r\n\r\n  return (\r\n    <span ref={elementRef} className=\"relative inline-block bg-transparent\">\r\n      {children}\r\n    </span>\r\n  );\r\n}",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": []
  }
}