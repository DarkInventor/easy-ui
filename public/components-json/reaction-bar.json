{
  "name": "reaction-bar",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "class-variance-authority",
    "framer-motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "reaction-bar.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\nimport { motion, AnimatePresence } from \"framer-motion\"\r\nimport Image from \"next/image\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst reactionBarVariants = cva(\r\n  \"inline-flex items-center justify-center rounded-full text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n      },\r\n      size: {\r\n        default: \"h-10 w-10\",\r\n        sm: \"h-8 w-8\",\r\n        lg: \"h-12 w-12\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  },\r\n)\r\n\r\nexport interface Reaction {\r\n  id: string\r\n  emoji: string\r\n  label: string\r\n  color: string\r\n}\r\n\r\nexport interface ReactionBarProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof reactionBarVariants> {\r\n  reactions: Reaction[]\r\n  defaultReaction?: Reaction\r\n  onReactionSelect?: (reaction: Reaction | null) => void\r\n  popoverPosition?: \"top\" | \"bottom\"\r\n  showLabel?: boolean\r\n  imageSize?: number\r\n  emojiSize?: number\r\n  popoverClassName?: string\r\n  defaultImage?: string\r\n}\r\n\r\nconst ReactionBar = React.forwardRef<HTMLButtonElement, ReactionBarProps>(\r\n  (\r\n    {\r\n      className,\r\n      variant,\r\n      size,\r\n      reactions,\r\n      defaultReaction,\r\n      onReactionSelect,\r\n      popoverPosition = \"top\",\r\n      showLabel = false,\r\n      imageSize = 20,\r\n      emojiSize = 24,\r\n      popoverClassName,\r\n      defaultImage,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const [selectedReaction, setSelectedReaction] = React.useState<Reaction | null>(null)\r\n    const [isHovering, setIsHovering] = React.useState(false)\r\n    const [isMobileOpen, setIsMobileOpen] = React.useState(false)\r\n\r\n    const handleReactionSelect = (reaction: Reaction) => {\r\n      const newReaction = reaction.id === selectedReaction?.id ? null : reaction\r\n      setSelectedReaction(newReaction)\r\n      setIsHovering(false)\r\n      setIsMobileOpen(false)\r\n      onReactionSelect?.(newReaction)\r\n    }\r\n\r\n    const handleClick = (e: React.MouseEvent) => {\r\n      if (window.innerWidth < 768) {\r\n        e.preventDefault()\r\n        setIsMobileOpen(!isMobileOpen)\r\n      } else {\r\n        handleReactionSelect(selectedReaction || defaultReaction || reactions[0])\r\n      }\r\n    }\r\n\r\n    const renderContent = () => {\r\n      if (defaultImage && !selectedReaction) {\r\n        return (\r\n          <Image\r\n            src={defaultImage || \"/placeholder.svg\"}\r\n            alt=\"\"\r\n            width={imageSize}\r\n            height={imageSize}\r\n            className=\"object-cover rounded-full\"\r\n          />\r\n        )\r\n      }\r\n      return (\r\n        <motion.span\r\n          initial={{ scale: 1 }}\r\n          animate={{ scale: selectedReaction ? 1.2 : 1 }}\r\n          transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\r\n          style={{ fontSize: `${emojiSize}px`, display: \"inline-block\" }}\r\n        \r\n        >\r\n          {selectedReaction ? selectedReaction.emoji : defaultReaction?.emoji || \"üëç\"}\r\n        </motion.span>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div className=\"relative inline-block\">\r\n        {/* @ts-ignore */}\r\n        <motion.button\r\n          className={cn(reactionBarVariants({ variant, size, className }))}\r\n          ref={ref}\r\n          onMouseEnter={() => setIsHovering(true)}\r\n          onMouseLeave={() => setIsHovering(false)}\r\n          onClick={handleClick}\r\n          aria-label={selectedReaction ? selectedReaction.label : defaultReaction?.label || \"React\"}\r\n          whileHover={{ scale: 1.05 }}\r\n          whileTap={{ scale: 0.95 }}\r\n          {...props}\r\n        >\r\n          {renderContent()}\r\n          {showLabel && <span className=\"ml-2\">{(selectedReaction || defaultReaction || reactions[0]).label}</span>}\r\n        </motion.button>\r\n\r\n        <AnimatePresence>\r\n          {(isHovering || isMobileOpen) && (\r\n            <motion.div\r\n              initial={{ opacity: 0, y: popoverPosition === \"top\" ? 10 : -10 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              exit={{ opacity: 0, y: popoverPosition === \"top\" ? 10 : -10 }}\r\n              transition={{ duration: 0.2 }}\r\n              className={cn(\r\n                \"absolute left-0 bg-popover rounded-full shadow-lg flex p-1.5 z-50\",\r\n                \"dark:bg-popover-dark\",\r\n                popoverPosition === \"top\" ? \"bottom-full mb-2\" : \"top-full mt-2\",\r\n                \"md:w-auto w-[200px] md:flex-nowrap flex-wrap justify-center\",\r\n                popoverClassName,\r\n              )}\r\n              onMouseEnter={() => setIsHovering(true)}\r\n              onMouseLeave={() => setIsHovering(false)}\r\n            >\r\n              {reactions.map((reaction) => (\r\n                <motion.button\r\n                  key={reaction.id}\r\n                  className={cn(\r\n                    \"p-2 rounded-full transition-all\",\r\n                    selectedReaction?.id === reaction.id && \"bg-accent dark:bg-accent-dark\",\r\n                  )}\r\n                  style={{\r\n                    background: selectedReaction?.id === reaction.id ? `${reaction.color}20` : \"transparent\",\r\n                  }}\r\n                  whileHover={{\r\n                    scale: 1.2,\r\n                    backgroundColor: `${reaction.color}30`,\r\n                  }}\r\n                  whileTap={{ scale: 0.95 }}\r\n                  onClick={(e) => {\r\n                    e.stopPropagation()\r\n                    handleReactionSelect(reaction)\r\n                  }}\r\n                  aria-label={reaction.label}\r\n                >\r\n                  <motion.span\r\n                    style={{ fontSize: `${emojiSize}px`, display: \"inline-block\" }}\r\n                    whileHover={{ rotate: [0, -10, 10, -10, 10, 0] }}\r\n                    transition={{ duration: 0.5 }}\r\n                  >\r\n                    {reaction.emoji}\r\n                  </motion.span>\r\n                </motion.button>\r\n              ))}\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n      </div>\r\n    )\r\n  },\r\n)\r\nReactionBar.displayName = \"ReactionBar\"\r\n\r\nexport { ReactionBar, reactionBarVariants }\r\n\r\n",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": []
  }
}