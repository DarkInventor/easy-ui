{
  "name": "file-upload-card",
  "type": "registry:ui",
  "registryDependencies": [
    "card",
    "cardcontent",
    "progress",
    "button"
  ],
  "dependencies": [
    "lucide-react",
    "framer-motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "file-upload-card.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n\"use client\"\r\n\r\nimport type React from \"react\"\r\nimport { useState, useRef } from \"react\"\r\nimport { Upload, FileUp, Share2, Loader2, X, Image, File, UploadCloudIcon, Video } from \"lucide-react\"\r\nimport { motion, AnimatePresence } from \"framer-motion\"\r\nimport { Card, CardContent } from \"@/components/ui/card\"\r\nimport { Progress } from \"@/components/ui/progress\"\r\nimport { Button } from \"@/components/ui/button\"\r\n\r\nconst FileUploadZone = () => {\r\n  const [draggedZone, setDraggedZone] = useState<number | null>(null)\r\n  const [files, setFiles] = useState<File[]>([])\r\n  const [uploading, setUploading] = useState(false)\r\n  const [progress, setProgress] = useState(0)\r\n  const fileInputRef = useRef<HTMLInputElement>(null)\r\n\r\n  const handleDragEnter = (index: number) => (e: React.DragEvent) => {\r\n    e.preventDefault()\r\n    setDraggedZone(index)\r\n  }\r\n\r\n  const handleDragLeave = (e: React.DragEvent) => {\r\n    e.preventDefault()\r\n    setDraggedZone(null)\r\n  }\r\n\r\n  const simulateUpload = async (newFiles: File[]) => {\r\n    setUploading(true)\r\n    setProgress(0)\r\n\r\n    for (let i = 0; i <= 100; i += 10) {\r\n      await new Promise((resolve) => setTimeout(resolve, 200))\r\n      setProgress(i)\r\n    }\r\n\r\n    setFiles((prevFiles) => [...prevFiles, ...newFiles])\r\n    setUploading(false)\r\n  }\r\n\r\n  const handleDrop = (index: number) => async (e: React.DragEvent) => {\r\n    e.preventDefault()\r\n    setDraggedZone(null)\r\n    const droppedFiles = Array.from(e.dataTransfer.files)\r\n    if (droppedFiles.length > 0) {\r\n      await simulateUpload(droppedFiles)\r\n    }\r\n  }\r\n\r\n  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFiles = Array.from(e.target.files || [])\r\n    if (selectedFiles.length > 0) {\r\n      await simulateUpload(selectedFiles)\r\n    }\r\n  }\r\n\r\n  const removeFile = (index: number) => {\r\n    setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index))\r\n  }\r\n\r\n  const zones = [\r\n    {\r\n      title: \"Upload Images\",\r\n      subtitle: \"Drop images here\",\r\n      icon: Image,\r\n      gradient: \"from-purple-400 via-pink-500 to-red-500\",\r\n      rotate: \"-rotate-2\",\r\n    },\r\n    {\r\n      title: \"Upload Videos\",\r\n      subtitle: \"Drop videos here\",\r\n      icon: Video,\r\n      gradient: \"from-blue-400 via-teal-500 to-green-500\",\r\n      rotate: \"\",\r\n    },\r\n    {\r\n      title: \"Upload Files\",\r\n      subtitle: \"Drop files here\",\r\n      icon: UploadCloudIcon,\r\n      gradient: \"from-yellow-400 via-orange-500 to-red-500\",\r\n      rotate: \"rotate-3\",\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <Card className=\"mx-auto w-full max-w-[300px] lg:max-w-[500px] overflow-hidden rounded-[1rem] mt-10 mb-10\">\r\n      <CardContent className=\"p-6 py-10 cursor:pointer\">\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6\">\r\n          {zones.map((zone, index) => (\r\n            <div key={index} className={`relative ${zone.rotate}`}>\r\n              <motion.div\r\n                onDragEnter={handleDragEnter(index)}\r\n                onDragOver={(e: { preventDefault: () => any }) => e.preventDefault()}\r\n                onDragLeave={handleDragLeave}\r\n                onDrop={handleDrop(index)}\r\n                whileHover={{ y: -4, scale: 1.02 }}\r\n                whileTap={{ scale: 0.98 }}\r\n                className=\"group relative h-full\"\r\n              >\r\n                <div\r\n                  className={`\r\n                    absolute inset-0 -z-10 rounded-xl bg-gradient-to-br ${zone.gradient}\r\n                    opacity-0 blur-md transition-opacity duration-300\r\n                    ${draggedZone === index ? \"opacity-70\" : \"group-hover:opacity-70\"}\r\n                  `}\r\n                />\r\n                <Card className=\"relative h-full rounded-[1rem] overflow-hidden border-2 border-dashed border-gray-200 dark:border-gray-800 transition-colors duration-300 group-hover:border-transparent\">\r\n                  <CardContent className=\"flex h-full flex-col items-center justify-center p-6 text-center\">\r\n                    <motion.div\r\n                      whileHover={{ scale: 1.1, rotate: 10 }}\r\n                      className=\"rounded-full bg-gray-100 dark:bg-gray-800 p-3 mb-4\"\r\n                    >\r\n                      <zone.icon className=\"h-8 w-8 text-gray-500\" />\r\n                    </motion.div>\r\n                    <h3 className=\"mb-1 text-sm font-medium\">{zone.title}</h3>\r\n                    <p className=\"text-xs text-gray-500\">{zone.subtitle}</p>\r\n                  </CardContent>\r\n                </Card>\r\n              </motion.div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {(uploading || files.length > 0) && (\r\n          <div className=\"mb-6\">\r\n            <Progress value={uploading ? progress : 100} className=\"h-2 mb-2\" />\r\n            <p className=\"text-sm text-gray-500 mb-2\">\r\n              {uploading ? `Uploading... ${progress}%` : `${files.length} file(s) uploaded`}\r\n            </p>\r\n            <AnimatePresence>\r\n              {files.map((file, index) => (\r\n                <motion.div\r\n                  key={`${file.name}-${index}`}\r\n                  initial={{ opacity: 0, y: -10 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  exit={{ opacity: 0, y: -10 }}\r\n                  className=\"flex items-center justify-between bg-gray-100 dark:bg-gray-800 rounded-[1rem] p-2 mb-2\"\r\n                >\r\n                  <span className=\"truncate max-w-[80%] text-sm text-gray-700 dark:text-gray-300 ml-2\">{file.name}</span>\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"icon\"\r\n                    onClick={() => removeFile(index)}\r\n                    className=\"h-6 w-6 p-0 hover:bg-gray-200 dark:hover:bg-gray-700\"\r\n                  >\r\n                    <X className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </motion.div>\r\n              ))}\r\n            </AnimatePresence>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"text-center\">\r\n          <input type=\"file\" ref={fileInputRef} onChange={handleFileSelect} className=\"hidden\" multiple />\r\n          <Button\r\n            onClick={() => fileInputRef.current?.click()}\r\n            // className=\"bg-gradient-to-r from-blue-500 to-teal-500 text-white hover:from-blue-600 hover:to-teal-600\"\r\n            disabled={uploading}\r\n            className=\"rounded-[1rem] mt-5\"\r\n          >\r\n            {uploading ? (\r\n              <>\r\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                Uploading...\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Upload className=\"mr-2 h-4 w-4\" />\r\n                Choose Files\r\n              </>\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default FileUploadZone\r\n\r\n",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": [
      "npx shadcn@latest add card",
      "npx shadcn@latest add cardcontent",
      "npx shadcn@latest add progress",
      "npx shadcn@latest add button"
    ]
  }
}