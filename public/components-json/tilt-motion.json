{
  "name": "tilt-motion",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "framer-motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "tilt-motion.tsx",
      "content": "\"use client\"\r\n\r\nimport type React from \"react\"\r\nimport { useState, useRef, useEffect } from \"react\"\r\nimport { motion, useMotionValue, useSpring, useTransform } from \"framer-motion\"\r\n\r\ninterface TiltMotionProps {\r\n  children: React.ReactNode\r\n  tiltFactor?: number\r\n  perspective?: number\r\n  scale?: number\r\n  transitionDuration?: number\r\n}\r\n\r\nexport const TiltMotion: React.FC<TiltMotionProps> = ({\r\n  children,\r\n  tiltFactor = 15,\r\n  perspective = 1000,\r\n  scale = 1.05,\r\n  transitionDuration = 0.5,\r\n}) => {\r\n  const [isHovering, setIsHovering] = useState(false)\r\n  const ref = useRef<HTMLDivElement>(null)\r\n  const [elementSize, setElementSize] = useState({ width: 0, height: 0 })\r\n\r\n  const x = useMotionValue(0)\r\n  const y = useMotionValue(0)\r\n\r\n  const springConfig = { damping: 30, stiffness: 400, mass: 0.5 }\r\n  const xSpring = useSpring(x, springConfig)\r\n  const ySpring = useSpring(y, springConfig)\r\n\r\n  const rotateX = useTransform(ySpring, [-elementSize.height / 2, elementSize.height / 2], [tiltFactor, -tiltFactor])\r\n  const rotateY = useTransform(xSpring, [-elementSize.width / 2, elementSize.width / 2], [-tiltFactor, tiltFactor])\r\n\r\n  useEffect(() => {\r\n    const updateSize = () => {\r\n      if (ref.current) {\r\n        setElementSize({\r\n          width: ref.current.offsetWidth,\r\n          height: ref.current.offsetHeight,\r\n        })\r\n      }\r\n    }\r\n\r\n    updateSize()\r\n    window.addEventListener(\"resize\", updateSize)\r\n    return () => window.removeEventListener(\"resize\", updateSize)\r\n  }, [])\r\n\r\n  const handleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    if (!ref.current) return\r\n    const rect = ref.current.getBoundingClientRect()\r\n    const mouseX = event.clientX - rect.left\r\n    const mouseY = event.clientY - rect.top\r\n    const centerX = elementSize.width / 2\r\n    const centerY = elementSize.height / 2\r\n    x.set(mouseX - centerX)\r\n    y.set(mouseY - centerY)\r\n  }\r\n\r\n  const handleMouseEnter = () => setIsHovering(true)\r\n  const handleMouseLeave = () => {\r\n    setIsHovering(false)\r\n    x.set(0)\r\n    y.set(0)\r\n  }\r\n\r\n  return (\r\n    <motion.div\r\n      ref={ref}\r\n      style={{\r\n        perspective,\r\n        transformStyle: \"preserve-3d\",\r\n      }}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n    >\r\n      <motion.div\r\n        style={{\r\n          rotateX,\r\n          rotateY,\r\n          scale: isHovering ? scale : 1,\r\n          z: isHovering ? 50 : 0,\r\n        }}\r\n        transition={{\r\n          duration: transitionDuration,\r\n          type: \"spring\",\r\n          ...springConfig,\r\n        }}\r\n      >\r\n        {children}\r\n      </motion.div>\r\n    </motion.div>\r\n  )\r\n}\r\n\r\n",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": []
  }
}