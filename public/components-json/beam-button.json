{
  "name": "beam-button",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "framer-motion",
    "@radix-ui",
    "class-variance-authority"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "beam-button.tsx",
      "content": "// \"use client\"\r\n\r\n// import { useState } from \"react\"\r\n\r\n// import * as React from \"react\"\r\n// import { motion, useMotionTemplate, useMotionValue } from \"framer-motion\"\r\n// import { cn } from \"@/lib/utils\"\r\n// import { Slot } from \"@radix-ui/react-slot\"\r\n// import { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\n// const beamButtonVariants = cva(\r\n//   \"inline-flex items-center justify-center whitespace-nowrap font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:pointer-events-none disabled:opacity-50 dark:focus-visible:ring-slate-300\",\r\n//   {\r\n//     variants: {\r\n//       variant: {\r\n//         default: \"text-slate-50\",\r\n//         outline: \"text-slate-50\",\r\n//         ghost: \"text-slate-50 hover:text-slate-50\",\r\n//       },\r\n//       size: {\r\n//         default: \"h-9 px-4 py-2\",\r\n//         sm: \"h-8 px-3 text-xs\",\r\n//         lg: \"h-10 px-8\",\r\n//         icon: \"h-9 w-9\",\r\n//       },\r\n//     },\r\n//     defaultVariants: {\r\n//       variant: \"default\",\r\n//       size: \"default\",\r\n//     },\r\n//   },\r\n// )\r\n\r\n// interface BeamButtonProps\r\n//   extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n//     VariantProps<typeof beamButtonVariants> {\r\n//   asChild?: boolean\r\n//   beamProps?: {\r\n//     beamColor?: string\r\n//     beamCount?: number\r\n//     glowColor?: string\r\n//     containerColor?: string\r\n//     hoverColor?: string\r\n//     beamDuration?: number\r\n//     glowSize?: number\r\n//   }\r\n// }\r\n\r\n// const BeamButton = React.forwardRef<HTMLButtonElement, BeamButtonProps>(\r\n//   ({ className, variant, size, asChild = false, beamProps = {}, children, ...props }, ref) => {\r\n//     const Comp = asChild ? Slot : \"button\"\r\n//     const [hovered, setHovered] = useState(false)\r\n//     const mouseX = useMotionValue(0)\r\n//     const mouseY = useMotionValue(0)\r\n\r\n//     const {\r\n//       beamColor = \"#3b82f6\",\r\n//       beamCount = 2,\r\n//       glowColor = \"rgba(59, 130, 246, 0.5)\",\r\n//       containerColor = \"rgba(17, 24, 39, 0.7)\",\r\n//       hoverColor = \"rgba(59, 130, 246, 0.2)\",\r\n//       beamDuration = 1.5,\r\n//       glowSize = 120,\r\n//     } = beamProps\r\n\r\n//     const handleMouseMove = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n//       const rect = e.currentTarget.getBoundingClientRect()\r\n//       mouseX.set(e.clientX - rect.left)\r\n//       mouseY.set(e.clientY - rect.top)\r\n//     }\r\n\r\n//     const beams = Array.from({ length: beamCount }, (_, i) => (\r\n//       <motion.div\r\n//         key={i}\r\n//         className=\"absolute inset-0 overflow-hidden rounded-md\"\r\n//         initial={{ opacity: 0.5 }}\r\n//         animate={{ opacity: hovered ? 1 : 0.5 }}\r\n//         transition={{ duration: 0.3 }}\r\n//       >\r\n//         <motion.div\r\n//           className=\"absolute inset-0\"\r\n//           style={{\r\n//             background: `linear-gradient(90deg, transparent, ${beamColor}, transparent)`,\r\n//             width: \"2px\",\r\n//             left: \"-100%\",\r\n//           }}\r\n//           animate={{\r\n//             left: \"200%\",\r\n//           }}\r\n//           transition={{\r\n//             duration: beamDuration + i,\r\n//             repeat: Number.POSITIVE_INFINITY,\r\n//             ease: \"linear\",\r\n//             repeatDelay: 0.5,\r\n//           }}\r\n//         />\r\n//       </motion.div>\r\n//     ))\r\n\r\n//     const glowStyle = useMotionTemplate`radial-gradient(\r\n//       ${glowSize}px circle at ${mouseX}px ${mouseY}px,\r\n//       ${glowColor},\r\n//       transparent 80%\r\n//     )`\r\n\r\n//     return (\r\n//       <motion.div\r\n//         className=\"relative inline-flex overflow-hidden rounded-md p-[1px] transition-colors duration-300\"\r\n//         style={{ background: containerColor }}\r\n//         // @ts-ignore\r\n//         onMouseMove={handleMouseMove}\r\n//         onMouseEnter={() => setHovered(true)}\r\n//         onMouseLeave={() => setHovered(false)}\r\n//         animate={{ background: hovered ? hoverColor : containerColor }}\r\n//       >\r\n//         {beams}\r\n//         <motion.div\r\n//           className=\"absolute inset-0 rounded-md opacity-0 transition-opacity duration-300\"\r\n//           style={{ background: glowStyle }}\r\n//           animate={{ opacity: hovered ? 1 : 0 }}\r\n//         />\r\n//         <Comp\r\n//           className={cn(\r\n//             beamButtonVariants({ variant, size, className }),\r\n//             \"relative rounded-[5px] bg-slate-950\",\r\n//             \"disabled:pointer-events-none disabled:opacity-50\",\r\n//           )}\r\n//           ref={ref}\r\n//           {...props}\r\n//         >\r\n//           {children}\r\n//         </Comp>\r\n//       </motion.div>\r\n//     )\r\n//   },\r\n// )\r\n// BeamButton.displayName = \"BeamButton\"\r\n\r\n// export { BeamButton, beamButtonVariants }\r\n\r\n\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { motion, useMotionTemplate, useMotionValue } from \"framer-motion\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nconst beamButtonVariants = cva(\r\n  \"inline-flex items-center justify-center whitespace-nowrap font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:pointer-events-none disabled:opacity-50 dark:focus-visible:ring-slate-300\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"bg-white text-slate-900 hover:bg-slate-100 dark:bg-black dark:text-slate-100 dark:hover:bg-slate-800 border border-slate-200 dark:border-slate-700 hover:\",\r\n        outline:\r\n          \"border border-slate-200 bg-white hover:bg-slate-100 hover:text-slate-900 dark:border-slate-700 dark:bg-black dark:hover:bg-slate-800 dark:hover:text-slate-50\",\r\n        ghost:\r\n          \"hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50 border border-transparent\",\r\n      },\r\n      size: {\r\n        default: \"h-9 px-4 py-2\",\r\n        sm: \"h-8 px-3 text-xs\",\r\n        lg: \"h-10 px-8\",\r\n        icon: \"h-9 w-9\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  },\r\n)\r\n\r\ninterface BeamButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof beamButtonVariants> {\r\n  asChild?: boolean\r\n  beamProps?: {\r\n    beamColor?: string\r\n    glowColor?: string\r\n    hoverColor?: string\r\n  }\r\n}\r\n\r\nconst BeamButton = React.forwardRef<HTMLButtonElement, BeamButtonProps>(\r\n  ({ className, variant, size, asChild = false, beamProps = {}, children, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    const [hovered, setHovered] = React.useState(false)\r\n    const mouseX = useMotionValue(0)\r\n    const mouseY = useMotionValue(0)\r\n\r\n    const {\r\n      beamColor = \"#3b82f6\",\r\n      glowColor = \"rgba(59, 130, 246, 0.5)\",\r\n      hoverColor = \"rgba(59, 130, 246, 0.2)\",\r\n    } = beamProps\r\n\r\n    const handleMouseMove = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n      const rect = e.currentTarget.getBoundingClientRect()\r\n      mouseX.set(e.clientX - rect.left)\r\n      mouseY.set(e.clientY - rect.top)\r\n    }\r\n\r\n    const glowStyle = useMotionTemplate`radial-gradient(\r\n      120px circle at ${mouseX}px ${mouseY}px,\r\n      ${glowColor},\r\n      transparent 80%\r\n    )`\r\n\r\n    return (\r\n      <motion.div\r\n        className=\"relative inline-flex overflow-hidden rounded-[0.75rem] transition-colors duration-300\"\r\n        style={{ background: hovered ? hoverColor : \"transparent\" }}\r\n        // @ts-ignore\r\n        onMouseMove={handleMouseMove}\r\n        onMouseEnter={() => setHovered(true)}\r\n        onMouseLeave={() => setHovered(false)}\r\n      >\r\n        <motion.div\r\n          className=\"absolute inset-0 rounded-md opacity-0 transition-opacity duration-300\"\r\n          style={{ background: glowStyle }}\r\n          animate={{ opacity: hovered ? 1 : 0 }}\r\n        />\r\n        <Comp className={cn(beamButtonVariants({ variant, size, className }))} ref={ref} {...props}>\r\n          {children}\r\n        </Comp>\r\n      </motion.div>\r\n    )\r\n  },\r\n)\r\nBeamButton.displayName = \"BeamButton\"\r\n\r\nexport { BeamButton, beamButtonVariants }\r\n\r\n",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": []
  }
}