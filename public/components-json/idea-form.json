{
  "name": "idea-form",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "framer-motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "idea-form.tsx",
      "content": "\"use client\"\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport confetti from \"canvas-confetti\"\r\nimport { AnimatePresence, motion, useAnimation } from \"framer-motion\"\r\n\r\nenum SubmitState {\r\n  Default,\r\n  Sending,\r\n  Done,\r\n}\r\n\r\nenum Label {\r\n  Sending = \"Sendingâ€¦\",\r\n  Sent = \"Sent\",\r\n  Submit = \"Submit\",\r\n}\r\n\r\ninterface IdeaFormProps {\r\n  maxChars?: number\r\n  placeholders?: string[]\r\n  backgroundColor?: string\r\n  textColor?: string\r\n  accentColor?: string\r\n  onSubmit?: (idea: string) => Promise<void>\r\n  submitDelay?: number\r\n  confettiConfig?: confetti.Options\r\n  buttonText?: string\r\n  onLog?: (idea: string) => void // New prop for custom logging\r\n}\r\n\r\nexport default function IdeaForm({\r\n  maxChars = 500,\r\n  placeholders = [\"What's on your mind?\", \"Any bright ideas?\"],\r\n  backgroundColor = \"bg-black dark:bg-white\",\r\n  textColor = \"text-white dark:text-black\",\r\n  accentColor = \"bg-yellow-400\",\r\n  onSubmit,\r\n  submitDelay = 1000,\r\n  confettiConfig = {\r\n    particleCount: 100,\r\n    spread: 70,\r\n    origin: { y: 0.6 },\r\n  },\r\n  buttonText = \"Share your thoughts\",\r\n  onLog, // New prop for custom logging\r\n}: IdeaFormProps) {\r\n  const [expanded, setExpanded] = useState(false)\r\n  const [idea, setIdea] = useState(\"\")\r\n  const [submitState, setSubmitState] = useState(SubmitState.Default)\r\n  const [placeholderIndex, setPlaceholderIndex] = useState(0)\r\n  const formRef = useRef<HTMLFormElement>(null)\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\r\n  const iconControls = useAnimation()\r\n\r\n  useEffect(() => {\r\n    const handleOutsideClick = (e: MouseEvent) => {\r\n      if (\r\n        formRef.current &&\r\n        !formRef.current.contains(e.target as Node) &&\r\n        submitState === SubmitState.Default\r\n      ) {\r\n        setExpanded(false)\r\n      }\r\n    }\r\n\r\n    const handleEscKey = (e: KeyboardEvent) => {\r\n      if (e.key === \"Escape\" && submitState === SubmitState.Default) {\r\n        setExpanded(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"mousedown\", handleOutsideClick)\r\n    document.addEventListener(\"keydown\", handleEscKey)\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleOutsideClick)\r\n      document.removeEventListener(\"keydown\", handleEscKey)\r\n    }\r\n  }, [submitState])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setPlaceholderIndex((prevIndex) => (prevIndex + 1) % placeholders.length)\r\n    }, 3000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [placeholders])\r\n\r\n  useEffect(() => {\r\n    const pulseAnimation = async () => {\r\n      await iconControls.start({ scale: 1.2, transition: { duration: 0.3 } })\r\n      await iconControls.start({ scale: 1, transition: { duration: 0.3 } })\r\n    }\r\n    pulseAnimation()\r\n    const interval = setInterval(pulseAnimation, 3000)\r\n    return () => clearInterval(interval)\r\n  }, [iconControls])\r\n\r\n  const handleToggle = () => {\r\n    setExpanded(!expanded)\r\n    if (!expanded) {\r\n      setTimeout(() => textareaRef.current?.focus(), 0)\r\n    }\r\n  }\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    if (submitState !== SubmitState.Default) return\r\n\r\n    // Console log the textarea text\r\n    console.log(idea)\r\n\r\n    // Use the custom logging function if provided\r\n    if (onLog) {\r\n      onLog(idea)\r\n    }\r\n\r\n    setSubmitState(SubmitState.Sending)\r\n\r\n    if (onSubmit) {\r\n      await onSubmit(idea)\r\n    } else {\r\n      await new Promise((resolve) => setTimeout(resolve, submitDelay))\r\n    }\r\n\r\n    setSubmitState(SubmitState.Done)\r\n\r\n    confetti(confettiConfig)\r\n\r\n    await new Promise((resolve) => setTimeout(resolve, 600))\r\n    setExpanded(false)\r\n    setTimeout(() => {\r\n      setIdea(\"\")\r\n      setSubmitState(SubmitState.Default)\r\n    }, 300)\r\n  }\r\n\r\n  return (\r\n    <motion.form\r\n      ref={formRef}\r\n      onSubmit={handleSubmit}\r\n      className={`relative w-[250px] overflow-hidden rounded-[1em] shadow-lg ${\r\n        expanded ? \"bg-transparent\" : `${backgroundColor} ${textColor}`\r\n      }`}\r\n      animate={{ height: expanded ? 200 : 46 }}\r\n      transition={{ duration: 0.3, ease: [0.65, 0, 0.35, 1.35] }}\r\n    >\r\n      <motion.svg\r\n        className=\"absolute top-3 left-3 w-6 h-6 text-current\"\r\n        viewBox=\"0 0 32 32\"\r\n        aria-hidden=\"true\"\r\n        animate={iconControls}\r\n      >\r\n        <g fill=\"currentColor\">\r\n          <path d=\"M16,2A10,10,0,0,0,6,12a9.19,9.19,0,0,0,3.46,7.62c1,.93,1.54,1.46,1.54,2.38h2c0-1.84-1.11-2.87-2.19-3.86A7.2,7.2,0,0,1,8,12a8,8,0,0,1,16,0,7.2,7.2,0,0,1-2.82,6.14c-1.07,1-2.18,2-2.18,3.86h2c0-.92.53-1.45,1.54-2.39A9.18,9.18,0,0,0,26,12,10,10,0,0,0,16,2Z\" />\r\n          <rect x=\"11\" y=\"24\" width=\"10\" height=\"1\" />\r\n          <rect x=\"13\" y=\"28\" width=\"6\" height=\"1\" />\r\n        </g>\r\n      </motion.svg>\r\n      <motion.button\r\n        type=\"button\"\r\n        onClick={handleToggle}\r\n        className={`absolute inset-0 flex items-center pl-12 text-sm uppercase tracking-wider ${textColor}`}\r\n        animate={{ opacity: expanded ? 0 : 1 }}\r\n        transition={{ duration: 0.3, ease: [0.65, 0, 0.35, 1] }}\r\n      >\r\n        {buttonText}\r\n      </motion.button>\r\n      <motion.div\r\n        className={`absolute inset-0 w-full h-full ${accentColor}`}\r\n        initial={{ scaleY: 0 }}\r\n        animate={{ scaleY: expanded ? 1 : 0 }}\r\n        transition={{ duration: 0.3, ease: [0.65, 0, 0.35, 1] }}\r\n        style={{ transformOrigin: \"top\" }}\r\n      />\r\n      <AnimatePresence>\r\n        {expanded && (\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            transition={{ duration: 0.3, ease: [0.65, 0, 0.35, 1] }}\r\n            className=\"absolute inset-0 pt-6 pb-3 px-4 pl-20\"\r\n          >\r\n            <label htmlFor=\"my-idea\" className=\"sr-only\">\r\n              Idea\r\n            </label>\r\n            <textarea\r\n              ref={textareaRef}\r\n              id=\"my-idea\"\r\n              className=\"w-full h-24 bg-transparent text-black placeholder-gray-600 resize-none focus:outline-none\"\r\n              placeholder={placeholders[placeholderIndex]}\r\n              value={idea}\r\n              onChange={(e) => setIdea(e.target.value.slice(0, maxChars))}\r\n              disabled={submitState !== SubmitState.Default}\r\n            />\r\n            <div className=\"flex justify-between items-center mt-2\">\r\n              <span className=\"text-xs text-gray-600\">\r\n                {idea.length}/{maxChars}\r\n              </span>\r\n              <button\r\n                type=\"submit\"\r\n                className={`px-4 py-2 ${backgroundColor} ${textColor} rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-400 disabled:opacity-30 transition-all duration-300 ease-in-out hover:bg-opacity-80`}\r\n                disabled={\r\n                  idea.length === 0 || submitState !== SubmitState.Default\r\n                }\r\n              >\r\n                {submitState === SubmitState.Sending\r\n                  ? Label.Sending\r\n                  : submitState === SubmitState.Done\r\n                  ? Label.Sent\r\n                  : Label.Submit}\r\n              </button>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </motion.form>\r\n  )\r\n}\r\n\r\n\r\n",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": []
  }
}