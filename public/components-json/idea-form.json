{
  "name": "idea-form",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "framer-motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "idea-form.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useRef, useState } from \"react\"\nimport confetti from \"canvas-confetti\"\nimport { AnimatePresence, motion, useAnimation } from \"framer-motion\"\n\nenum SubmitState {\n  Default,\n  Sending,\n  Done,\n}\n\nenum Label {\n  Sending = \"Sendingâ€¦\",\n  Sent = \"Sent\",\n  Submit = \"Submit\",\n}\n\ninterface IdeaFormProps {\n  maxChars?: number\n  placeholders?: string[]\n  backgroundColor?: string\n  textColor?: string\n  accentColor?: string\n  onSubmit?: (idea: string) => Promise<void>\n  submitDelay?: number\n  confettiConfig?: confetti.Options\n  buttonText?: string\n  onLog?: (idea: string) => void // New prop for custom logging\n}\n\nexport default function IdeaForm({\n  maxChars = 500,\n  placeholders = [\"What's on your mind?\", \"Any bright ideas?\"],\n  backgroundColor = \"bg-black dark:bg-white\",\n  textColor = \"text-white dark:text-black\",\n  accentColor = \"bg-yellow-400\",\n  onSubmit,\n  submitDelay = 1000,\n  confettiConfig = {\n    particleCount: 100,\n    spread: 70,\n    origin: { y: 0.6 },\n  },\n  buttonText = \"Share your thoughts\",\n  onLog, // New prop for custom logging\n}: IdeaFormProps) {\n  const [expanded, setExpanded] = useState(false)\n  const [idea, setIdea] = useState(\"\")\n  const [submitState, setSubmitState] = useState(SubmitState.Default)\n  const [placeholderIndex, setPlaceholderIndex] = useState(0)\n  const formRef = useRef<HTMLFormElement>(null)\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\n  const iconControls = useAnimation()\n\n  useEffect(() => {\n    const handleOutsideClick = (e: MouseEvent) => {\n      if (\n        formRef.current &&\n        !formRef.current.contains(e.target as Node) &&\n        submitState === SubmitState.Default\n      ) {\n        setExpanded(false)\n      }\n    }\n\n    const handleEscKey = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\" && submitState === SubmitState.Default) {\n        setExpanded(false)\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleOutsideClick)\n    document.addEventListener(\"keydown\", handleEscKey)\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleOutsideClick)\n      document.removeEventListener(\"keydown\", handleEscKey)\n    }\n  }, [submitState])\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setPlaceholderIndex((prevIndex) => (prevIndex + 1) % placeholders.length)\n    }, 3000)\n\n    return () => clearInterval(interval)\n  }, [placeholders])\n\n  useEffect(() => {\n    const pulseAnimation = async () => {\n      await iconControls.start({ scale: 1.2, transition: { duration: 0.3 } })\n      await iconControls.start({ scale: 1, transition: { duration: 0.3 } })\n    }\n    pulseAnimation()\n    const interval = setInterval(pulseAnimation, 3000)\n    return () => clearInterval(interval)\n  }, [iconControls])\n\n  const handleToggle = () => {\n    setExpanded(!expanded)\n    if (!expanded) {\n      setTimeout(() => textareaRef.current?.focus(), 0)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (submitState !== SubmitState.Default) return\n\n    // Console log the textarea text\n    console.log(idea)\n\n    // Use the custom logging function if provided\n    if (onLog) {\n      onLog(idea)\n    }\n\n    setSubmitState(SubmitState.Sending)\n\n    if (onSubmit) {\n      await onSubmit(idea)\n    } else {\n      await new Promise((resolve) => setTimeout(resolve, submitDelay))\n    }\n\n    setSubmitState(SubmitState.Done)\n\n    confetti(confettiConfig)\n\n    await new Promise((resolve) => setTimeout(resolve, 600))\n    setExpanded(false)\n    setTimeout(() => {\n      setIdea(\"\")\n      setSubmitState(SubmitState.Default)\n    }, 300)\n  }\n\n  return (\n    <motion.form\n      ref={formRef}\n      onSubmit={handleSubmit}\n      className={`relative w-[250px] overflow-hidden rounded-[1em] shadow-lg ${\n        expanded ? \"bg-transparent\" : `${backgroundColor} ${textColor}`\n      }`}\n      animate={{ height: expanded ? 200 : 46 }}\n      transition={{ duration: 0.3, ease: [0.65, 0, 0.35, 1.35] }}\n    >\n      <motion.svg\n        className=\"absolute top-3 left-3 w-6 h-6 text-current\"\n        viewBox=\"0 0 32 32\"\n        aria-hidden=\"true\"\n        animate={iconControls}\n      >\n        <g fill=\"currentColor\">\n          <path d=\"M16,2A10,10,0,0,0,6,12a9.19,9.19,0,0,0,3.46,7.62c1,.93,1.54,1.46,1.54,2.38h2c0-1.84-1.11-2.87-2.19-3.86A7.2,7.2,0,0,1,8,12a8,8,0,0,1,16,0,7.2,7.2,0,0,1-2.82,6.14c-1.07,1-2.18,2-2.18,3.86h2c0-.92.53-1.45,1.54-2.39A9.18,9.18,0,0,0,26,12,10,10,0,0,0,16,2Z\" />\n          <rect x=\"11\" y=\"24\" width=\"10\" height=\"1\" />\n          <rect x=\"13\" y=\"28\" width=\"6\" height=\"1\" />\n        </g>\n      </motion.svg>\n      <motion.button\n        type=\"button\"\n        onClick={handleToggle}\n        className={`absolute inset-0 flex items-center pl-12 text-sm uppercase tracking-wider ${textColor}`}\n        animate={{ opacity: expanded ? 0 : 1 }}\n        transition={{ duration: 0.3, ease: [0.65, 0, 0.35, 1] }}\n      >\n        {buttonText}\n      </motion.button>\n      <motion.div\n        className={`absolute inset-0 w-full h-full ${accentColor}`}\n        initial={{ scaleY: 0 }}\n        animate={{ scaleY: expanded ? 1 : 0 }}\n        transition={{ duration: 0.3, ease: [0.65, 0, 0.35, 1] }}\n        style={{ transformOrigin: \"top\" }}\n      />\n      <AnimatePresence>\n        {expanded && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.3, ease: [0.65, 0, 0.35, 1] }}\n            className=\"absolute inset-0 pt-6 pb-3 px-4 pl-20\"\n          >\n            <label htmlFor=\"my-idea\" className=\"sr-only\">\n              Idea\n            </label>\n            <textarea\n              ref={textareaRef}\n              id=\"my-idea\"\n              className=\"w-full h-24 bg-transparent text-black placeholder-gray-600 resize-none focus:outline-none\"\n              placeholder={placeholders[placeholderIndex]}\n              value={idea}\n              onChange={(e) => setIdea(e.target.value.slice(0, maxChars))}\n              disabled={submitState !== SubmitState.Default}\n            />\n            <div className=\"flex justify-between items-center mt-2\">\n              <span className=\"text-xs text-gray-600\">\n                {idea.length}/{maxChars}\n              </span>\n              <button\n                type=\"submit\"\n                className={`px-4 py-2 ${backgroundColor} ${textColor} rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-400 disabled:opacity-30 transition-all duration-300 ease-in-out hover:bg-opacity-80`}\n                disabled={\n                  idea.length === 0 || submitState !== SubmitState.Default\n                }\n              >\n                {submitState === SubmitState.Sending\n                  ? Label.Sending\n                  : submitState === SubmitState.Done\n                  ? Label.Sent\n                  : Label.Submit}\n              </button>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </motion.form>\n  )\n}\n\n\n",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": []
  }
}