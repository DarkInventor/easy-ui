{
  "name": "launchpad",
  "type": "registry:ui",
  "registryDependencies": [
    "input",
    "button",
    "scrollarea",
    "tabs",
    "tabslist",
    "tabstrigger"
  ],
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "launchpad.tsx",
      "content": "\"use client\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Search, ChevronLeft, X } from 'lucide-react';\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\n\r\ninterface Application {\r\n  id: number;\r\n  name: string;\r\n  icon: string;\r\n  category: string;\r\n}\r\n\r\ninterface LaunchPadProps {\r\n  applications: Application[];\r\n}\r\n\r\nconst LaunchPad: React.FC<LaunchPadProps> = ({ applications }) => {\r\n  const [isLaunchpadOpen, setIsLaunchpadOpen] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filteredApps, setFilteredApps] = useState<Application[]>([]);\r\n  const [selectedCategory, setSelectedCategory] = useState('All');\r\n  const [selectedApp, setSelectedApp] = useState<Application | null>(null);\r\n\r\n  // Categories derived from applications props for dynamic categories handling\r\n  const categories = Array.from(new Set(applications.map(app => app.category).concat('All')));\r\n\r\n  useEffect(() => {\r\n    const filtered = applications.filter(app =>\r\n      app.name.toLowerCase().includes(searchTerm.toLowerCase()) &&\r\n      (selectedCategory === 'All' || app.category === selectedCategory)\r\n    )\r\n    setFilteredApps(filtered)\r\n  }, [searchTerm, selectedCategory, applications])\r\n\r\n  const toggleLaunchpad = () => setIsLaunchpadOpen(!isLaunchpadOpen)\r\n\r\n//   @ts-ignore\r\n  const handleAppClick = (app) => {\r\n    setSelectedApp(app)\r\n  }\r\n\r\n  const handleBackClick = () => {\r\n    setSelectedApp(null)\r\n    setSearchTerm('')\r\n    setSelectedCategory('All')\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-[screen] overflow-hidden absolute bg-white dark:bg-black\">\r\n      <Button\r\n        onClick={toggleLaunchpad}\r\n        className=\"fixed bottom-20 left-1/2 transform -translate-x-1/2 rounded-xl bg-white dark:bg-black text-black dark:text-white hover:bg-gray-200 md:bottom-20 md:left-1/2 md:transform md:-translate-x-1/2\"\r\n        size=\"icon\"\r\n      >\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" className=\"lucide lucide-panel-top-close\"><rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\"/><path d=\"M3 9h18\"/><path d=\"m9 16 3-3 3 3\"/></svg>\r\n      </Button>\r\n\r\n      <AnimatePresence>\r\n        {isLaunchpadOpen && (\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            transition={{ duration: 0.2 }}\r\n            className=\"fixed inset-0 bg-transparent flex flex-col items-center pt-20 top-10 backdrop-blur sm:pt-20 sm:top-10\"\r\n            onClick={toggleLaunchpad}\r\n          >\r\n            <motion.div\r\n              initial={{ opacity: 0, y: -20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ delay: 0.1 }}\r\n              className=\"w-full max-w-xl px-4 sm:max-w-2xl sm:px-4\"\r\n              onClick={(e) => e.stopPropagation()}\r\n            >\r\n              <div className=\"relative mb-6 flex items-center\">\r\n                <Button\r\n                  onClick={handleBackClick}\r\n                  variant=\"ghost\"\r\n                  size=\"icon\"\r\n                  className=\"mr-2\"\r\n                >\r\n                  <ChevronLeft className=\"h-6 w-6 text-gray-400 dark:text-gray/20\" />\r\n                </Button>\r\n                <Input\r\n                  type=\"text\"\r\n                  placeholder=\"Search applications...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"w-full bg-gray-100 dark:bg-gray-800 backdrop-blur-lg border-none text-black dark:text-white\"\r\n                />\r\n                <Search className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\r\n              </div>\r\n\r\n              {!selectedApp && (\r\n                <Tabs defaultValue=\"All\" className=\"w-full mb-6 bg-transparent dark:bg-background/50 border-none dark:text-white text-black border-none rounded-lg\">\r\n                  <TabsList className=\"flex justify-start overflow-x-auto border-none gap-2 rounded-full bg-transparent\">\r\n                    {categories.map((category) => (\r\n                      <TabsTrigger\r\n                        key={category}\r\n                        value={category}\r\n                        onClick={() => setSelectedCategory(category)}\r\n                        className={`leading-7 tracking-tight w-auto border-none text-sm ${category === selectedCategory ? 'dark:bg-gray-700' : ''}`}\r\n                      >\r\n                        {category}\r\n                      </TabsTrigger>\r\n                    ))}\r\n                  </TabsList>\r\n                </Tabs>\r\n              )}\r\n            </motion.div>\r\n\r\n             <ScrollArea className=\"w-full max-w-2xl h-[calc(100vh-200px)]\">\r\n               <motion.div\r\n                className=\"grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 gap-6 p-4\"\r\n                initial={{ opacity: 0, scale: 0.9 }}\r\n                animate={{ opacity: 1, scale: 1 }}\r\n                transition={{ delay: 0.2 }}\r\n                onClick={(e) => e.stopPropagation()}\r\n              >\r\n                <AnimatePresence>\r\n                  {selectedApp ? (\r\n                    <motion.div\r\n                      key=\"app-details\"\r\n                      initial={{ opacity: 0 }}\r\n                      animate={{ opacity: 1 }}\r\n                      exit={{ opacity: 0 }}\r\n                      className=\"col-span-full flex flex-col items-center text-black dark:text-white\"\r\n                    >\r\n                      <div className=\"w-22 h-22 flex items-center justify-center rounded-3xl text-black dark:text-white mb-4\">\r\n                        <img src={selectedApp.icon} alt={selectedApp.name} className=\"w-24 h-24 \" />\r\n                      </div>\r\n                      <h2 className=\"text-2xl font-bold mb-2 leading-7 tracking-tigh text-black dark:text-white\">{selectedApp.name}</h2>\r\n                      <p className=\"text-lg mb-4 leading-7 tracking-tight text-black dark:text-white\">{selectedApp.category}</p>\r\n                      <Button className=\"bg-[#0B8CE9] text-white text-sm font-semibold\" onClick={() => alert(`Launching ${selectedApp.name}`)}>\r\n                        Open {selectedApp.name}\r\n                      </Button>\r\n                    </motion.div>\r\n                  ) : (\r\n                    filteredApps.map((app) => (\r\n                      <motion.div\r\n                        key={app.id}\r\n                        layout\r\n                        initial={{ opacity: 0, scale: 0.8 }}\r\n                        animate={{ opacity: 1, scale: 1 }}\r\n                        exit={{ opacity: 0, scale: 0.8 }}\r\n                        transition={{ duration: 0.2 }}\r\n                        className=\"flex flex-col items-center\"\r\n                        onClick={() => handleAppClick(app)}\r\n                      >\r\n                        <motion.div\r\n                          className=\"w-20 h-20 flex items-center justify-center border-none rounded-lg  cursor-pointer text-black dark:text-white\"\r\n                          whileHover={{ scale: 1.1 }}\r\n                          whileTap={{ scale: 0.95 }}\r\n                        >\r\n                          <img src={app.icon} alt={app.name} className=\"w-30 h-30 border-none rounded-lg text-black dark:text-white\" />\r\n                        </motion.div>\r\n                        <motion.p className=\"mt-2 text-xs text-center tracking-tight text-gray-700 dark:text-white font-semibold\">\r\n                          {app.name}\r\n                        </motion.p>\r\n                      </motion.div>\r\n                    ))\r\n                  )}\r\n                </AnimatePresence>\r\n              </motion.div>\r\n            </ScrollArea>\r\n\r\n            <Button\r\n              onClick={toggleLaunchpad}\r\n              variant=\"ghost\"\r\n              size=\"icon\"\r\n              className=\"relative bottom-20 text-black bg-gray-200 sm:relative sm:bottom-20\"\r\n            >\r\n              <X className=\"h-6 w-6\" />\r\n            </Button>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LaunchPad;",
      "type": "registry:ui"
    }
  ],
  "install": {
    "before": [
      "npx shadcn@latest add input",
      "npx shadcn@latest add button",
      "npx shadcn@latest add scrollarea",
      "npx shadcn@latest add tabs",
      "npx shadcn@latest add tabslist",
      "npx shadcn@latest add tabstrigger"
    ]
  }
}