{
  "name": "confetti-poll",
  "type": "registry:ui",
  "registryDependencies": ["https://ui.shadcn.com/registry/styles/new-york/button.json", "https://ui.shadcn.com/registry/styles/new-york/avatar.json"],
  "files": [
    {
      "path": "components/ui/confetti-poll.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useState } from \"react\"\nimport { Eye, Heart, MessageSquare, Bookmark, MoreHorizontal } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport confetti from \"canvas-confetti\"\n\n// Types\nexport interface PollOption {\n  id: string\n  text: string\n  votes: number\n  percentage: number\n}\n\nexport interface PollProps extends React.HTMLAttributes<HTMLDivElement> {\n  question: string\n  options: PollOption[]\n  onVote?: (optionId: string) => void\n  showResults?: boolean\n  totalVotes?: number\n  userVote?: string | null\n  author?: {\n    name: string\n    username: string\n    avatar: string\n  }\n  stats?: {\n    views?: number\n    likes?: number\n    comments?: number\n  }\n}\n\n// Component\nconst Poll = React.forwardRef<HTMLDivElement, PollProps>(\n  (\n    {\n      className,\n      question,\n      options: initialOptions,\n      onVote,\n      showResults: initialShowResults = false,\n      totalVotes: initialTotalVotes,\n      userVote: initialUserVote = null,\n      author,\n      stats: initialStats,\n      ...props\n    },\n    ref,\n  ) => {\n    const [hasVoted, setHasVoted] = useState(Boolean(initialUserVote))\n    const [selectedOption, setSelectedOption] = useState<string | null>(initialUserVote)\n    const [pollOptions, setPollOptions] = useState<PollOption[]>(initialOptions)\n    const [showResults, setShowResults] = useState(initialShowResults)\n    const [stats, setStats] = useState(initialStats)\n    const [isLiked, setIsLiked] = useState(false)\n\n    const totalVotes = initialTotalVotes || pollOptions.reduce((sum, option) => sum + option.votes, 0)\n\n    const handleVote = (optionId: string) => {\n      if (hasVoted) return\n\n      setSelectedOption(optionId)\n      setPollOptions((prev) =>\n        prev.map((option) => ({\n          ...option,\n          votes: option.id === optionId ? option.votes + 1 : option.votes,\n        })),\n      )\n\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 },\n      })\n\n      setHasVoted(true)\n      setShowResults(true)\n      onVote?.(optionId)\n    }\n\n    const handleLike = () => {\n      setIsLiked((prev) => !prev)\n      setStats((prev) => ({\n        ...prev,\n        // @ts-ignore\n        likes: prev.likes + (isLiked ? -1 : 1),\n      }))\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"w-full max-w-[598px] bg-white dark:bg-black border border-gray-200 dark:border-gray-800 rounded-2xl mt-20 mb-20\",\n          className,\n        )}\n        {...props}\n      >\n        <div className=\"p-4\">\n          {/* Author Section */}\n          {author && (\n            <div className=\"flex items-start justify-between gap-2 mb-3\">\n              <div className=\"flex gap-3\">\n                <Avatar className=\"h-10 w-10 rounded-full\">\n                  <AvatarImage src={author.avatar} alt={`@${author.username}`} />\n                  <AvatarFallback>{author.name.slice(0, 2).toUpperCase()}</AvatarFallback>\n                </Avatar>\n                <div>\n                  <div className=\"flex items-center gap-1 text-[15px] leading-5\">\n                    <span className=\"font-bold text-gray-900 dark:text-gray-100\">{author.name}</span>\n                    <span className=\"text-gray-500 dark:text-gray-400\">@{author.username}</span>\n                  </div>\n                </div>\n              </div>\n              <button className=\"text-gray-500 hover:text-gray-900 dark:hover:text-gray-100\">\n                <MoreHorizontal className=\"h-5 w-5\" />\n              </button>\n            </div>\n          )}\n\n          {/* Poll Content */}\n          <div className=\"mb-3\">\n            <p className=\"text-[15px] leading-5 text-gray-900 dark:text-gray-100 whitespace-pre-wrap\">{question}</p>\n          </div>\n\n          <div className=\"mb-3\">\n            {pollOptions.map((option) => (\n              <button\n                key={option.id}\n                onClick={() => handleVote(option.id)}\n                disabled={hasVoted}\n                className={cn(\n                  \"w-full text-left relative py-1 mb-2\",\n                  showResults ? \"cursor-default\" : \"cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800\",\n                )}\n              >\n                <div className=\"flex items-center\">\n                  {showResults && (\n                    <div\n                      className=\"absolute left-0 top-0 bottom-0 bg-blue-100 dark:bg-blue-900 rounded transition-all duration-500\"\n                      style={{ width: `${option.percentage}%` }}\n                    />\n                  )}\n                  <div className=\"relative flex justify-between items-center w-full z-10 px-3 py-2\">\n                    <span className=\"text-[15px] leading-5 text-gray-900 dark:text-gray-100\">{option.text}</span>\n                    {showResults && (\n                      <span className=\"text-[13px] leading-4 text-gray-500 dark:text-gray-400 ml-2\">\n                        {option.percentage.toFixed(1)}%\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </button>\n            ))}\n          </div>\n\n          {showResults && (\n            <p className=\"text-[13px] leading-4 text-gray-500 dark:text-gray-400 mb-3\">\n              {totalVotes} votes Â· Final results\n            </p>\n          )}\n\n          {/* Stats Footer */}\n          {stats && (\n            <div className=\"flex items-center justify-between text-gray-500 dark:text-gray-400 border-t border-gray-200 dark:border-gray-800 pt-3\">\n              <div className=\"flex space-x-6\">\n                <button className=\"group flex items-center hover:text-blue-500\">\n                  <Eye className=\"h-[18px] w-[18px] mr-2\" />\n                  <span className=\"text-[13px] leading-4 group-hover:text-blue-500\">\n                    {stats.views?.toLocaleString()}\n                  </span>\n                </button>\n                <button\n                  className={cn(\"group flex items-center\", isLiked ? \"text-pink-500\" : \"hover:text-pink-500\")}\n                  onClick={handleLike}\n                >\n                  <Heart className={cn(\"h-[18px] w-[18px] mr-2\", isLiked && \"fill-current\")} />\n                  <span\n                    className={cn(\"text-[13px] leading-4\", isLiked ? \"text-pink-500\" : \"group-hover:text-pink-500\")}\n                  >\n                    {stats.likes?.toLocaleString()}\n                  </span>\n                </button>\n                <button className=\"group flex items-center hover:text-blue-500\">\n                  <MessageSquare className=\"h-[18px] w-[18px] mr-2\" />\n                  <span className=\"text-[13px] leading-4 group-hover:text-blue-500\">\n                    {stats.comments?.toLocaleString()}\n                  </span>\n                </button>\n              </div>\n              <button className=\"flex items-center hover:text-blue-500\">\n                <Bookmark className=\"h-[18px] w-[18px] mr-2\" />\n                <span className=\"text-[13px] leading-4\">Save</span>\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  },\n)\nPoll.displayName = \"Poll\"\n\nexport { Poll }\n\n",
      "type": "registry:ui",
      "target": "components/ui/confetti-poll.tsx"
    },
    { 
      "path": "page.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Poll, type PollOption } from \"@/components/ui/confetti-poll\"\n\nexport default function Home() {\n  const [pollData, setPollData] = useState({\n    question: \"Quiz Time in the Turing Health Community! ðŸŽ‰ What's your go-to healthy snack? ðŸ¤”\",\n    options: [\n      { id: \"1\", text: \"Fresh Fruit\", votes: 3, percentage: 2.9 },\n      { id: \"2\", text: \"Veggie Sticks\", votes: 18, percentage: 17.6 },\n      { id: \"3\", text: \"Avocado Toast\", votes: 81, percentage: 79.4 },\n    ] as PollOption[],\n    author: {\n      name: \"Kathan Mehta\",\n      username: \"kathanmehtaa\",\n      avatar:\n        \"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Screenshot%202025-02-15%20at%2011.51.35%E2%80%AFAM-MWggRTUphPO3n2x57LKWOY9cxGr1jW.png\",\n    },\n    stats: {\n      views: 5874,\n      likes: 215,\n      comments: 11,\n    },\n    totalVotes: 102,\n    showResults: false,\n    userVote: null,\n  })\n\n  const handleVote = (optionId: string) => {\n    setPollData((prev) => ({\n      ...prev,\n      showResults: true,\n      userVote: optionId,\n      totalVotes: prev.totalVotes + 1,\n      options: prev.options.map((option) => {\n        if (option.id === optionId) {\n          const newVotes = option.votes + 1\n          const newTotalVotes = prev.totalVotes + 1\n          return {\n            ...option,\n            votes: newVotes,\n            percentage: (newVotes / newTotalVotes) * 100,\n          }\n        }\n        return {\n          ...option,\n          percentage: (option.votes / (prev.totalVotes + 1)) * 100,\n        }\n      }),\n    }))\n  }\n\n  return (\n    <main className=\"min-h-screen flex items-center justify-center p-4 bg-gray-100 dark:bg-gray-900\">\n      <Poll {...pollData} onVote={handleVote} />\n    </main>\n  )\n}",
      "type": "registry:component",
      "target": "page.tsx"
    }
  ],
  "author": "Kathan Mehta<ktmehta25@gmail.com>",
  "title": "Confetti Poll"
}