{
  "name": "reaction-bar",
  "type": "registry:ui",
  "registryDependencies": [],
  "files": [
    {
      "path": "components/ui/reaction-bar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport Image from \"next/image\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst reactionBarVariants = cva(\n  \"inline-flex items-center justify-center rounded-full text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 w-10\",\n        sm: \"h-8 w-8\",\n        lg: \"h-12 w-12\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface Reaction {\n  id: string\n  emoji: string\n  label: string\n  color: string\n}\n\nexport interface ReactionBarProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof reactionBarVariants> {\n  reactions: Reaction[]\n  defaultReaction?: Reaction\n  onReactionSelect?: (reaction: Reaction | null) => void\n  popoverPosition?: \"top\" | \"bottom\"\n  showLabel?: boolean\n  imageSize?: number\n  emojiSize?: number\n  popoverClassName?: string\n  defaultImage?: string\n}\n\nconst ReactionBar = React.forwardRef<HTMLButtonElement, ReactionBarProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      reactions,\n      defaultReaction,\n      onReactionSelect,\n      popoverPosition = \"top\",\n      showLabel = false,\n      imageSize = 20,\n      emojiSize = 24,\n      popoverClassName,\n      defaultImage,\n      ...props\n    },\n    ref,\n  ) => {\n    const [selectedReaction, setSelectedReaction] = React.useState<Reaction | null>(null)\n    const [isHovering, setIsHovering] = React.useState(false)\n    const [isMobileOpen, setIsMobileOpen] = React.useState(false)\n\n    const handleReactionSelect = (reaction: Reaction) => {\n      const newReaction = reaction.id === selectedReaction?.id ? null : reaction\n      setSelectedReaction(newReaction)\n      setIsHovering(false)\n      setIsMobileOpen(false)\n      onReactionSelect?.(newReaction)\n    }\n\n    const handleClick = (e: React.MouseEvent) => {\n      if (window.innerWidth < 768) {\n        e.preventDefault()\n        setIsMobileOpen(!isMobileOpen)\n      } else {\n        handleReactionSelect(selectedReaction || defaultReaction || reactions[0])\n      }\n    }\n\n    const renderContent = () => {\n      if (defaultImage && !selectedReaction) {\n        return (\n          <Image\n            src={defaultImage || \"/placeholder.svg\"}\n            alt=\"\"\n            width={imageSize}\n            height={imageSize}\n            className=\"object-cover rounded-full\"\n          />\n        )\n      }\n      return (\n        <motion.span\n          initial={{ scale: 1 }}\n          animate={{ scale: selectedReaction ? 1.2 : 1 }}\n          transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n          style={{ fontSize: `${emojiSize}px`, display: \"inline-block\" }}\n        \n        >\n          {selectedReaction ? selectedReaction.emoji : defaultReaction?.emoji || \"üëç\"}\n        </motion.span>\n      )\n    }\n\n    return (\n      <div className=\"relative inline-block\">\n        {/* @ts-ignore */}\n        <motion.button\n          className={cn(reactionBarVariants({ variant, size, className }))}\n          ref={ref}\n          onMouseEnter={() => setIsHovering(true)}\n          onMouseLeave={() => setIsHovering(false)}\n          onClick={handleClick}\n          aria-label={selectedReaction ? selectedReaction.label : defaultReaction?.label || \"React\"}\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          {...props}\n        >\n          {renderContent()}\n          {showLabel && <span className=\"ml-2\">{(selectedReaction || defaultReaction || reactions[0]).label}</span>}\n        </motion.button>\n\n        <AnimatePresence>\n          {(isHovering || isMobileOpen) && (\n            <motion.div\n              initial={{ opacity: 0, y: popoverPosition === \"top\" ? 10 : -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: popoverPosition === \"top\" ? 10 : -10 }}\n              transition={{ duration: 0.2 }}\n              className={cn(\n                \"absolute left-0 bg-popover rounded-full shadow-lg flex p-1.5 z-50\",\n                \"dark:bg-popover-dark\",\n                popoverPosition === \"top\" ? \"bottom-full mb-2\" : \"top-full mt-2\",\n                \"md:w-auto w-[200px] md:flex-nowrap flex-wrap justify-center\",\n                popoverClassName,\n              )}\n              onMouseEnter={() => setIsHovering(true)}\n              onMouseLeave={() => setIsHovering(false)}\n            >\n              {reactions.map((reaction) => (\n                <motion.button\n                  key={reaction.id}\n                  className={cn(\n                    \"p-2 rounded-full transition-all\",\n                    selectedReaction?.id === reaction.id && \"bg-accent dark:bg-accent-dark\",\n                  )}\n                  style={{\n                    background: selectedReaction?.id === reaction.id ? `${reaction.color}20` : \"transparent\",\n                  }}\n                  whileHover={{\n                    scale: 1.2,\n                    backgroundColor: `${reaction.color}30`,\n                  }}\n                  whileTap={{ scale: 0.95 }}\n                  onClick={(e) => {\n                    e.stopPropagation()\n                    handleReactionSelect(reaction)\n                  }}\n                  aria-label={reaction.label}\n                >\n                  <motion.span\n                    style={{ fontSize: `${emojiSize}px`, display: \"inline-block\" }}\n                    whileHover={{ rotate: [0, -10, 10, -10, 10, 0] }}\n                    transition={{ duration: 0.5 }}\n                  >\n                    {reaction.emoji}\n                  </motion.span>\n                </motion.button>\n              ))}\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    )\n  },\n)\nReactionBar.displayName = \"ReactionBar\"\n\nexport { ReactionBar, reactionBarVariants }\n\n",
      "type": "registry:ui",
      "target": "components/ui/reaction-bar.tsx"
    },
    {
      "path": "page.tsx",
      "content": "import { ReactionBar } from \"@/components/ui/reaction-bar\"\nimport React from 'react'\n\nconst reactions = [\n    { id: \"like\", emoji: \"üëç\", label: \"Like\", color: \"rgb(var(--color-like))\" },\n    { id: \"love\", emoji: \"‚ù§Ô∏è\", label: \"Love\", color: \"rgb(var(--color-love))\" },\n    { id: \"haha\", emoji: \"üòÇ\", label: \"Haha\", color: \"rgb(var(--color-haha))\" },\n    { id: \"wow\", emoji: \"üòÆ\", label: \"Wow\", color: \"rgb(var(--color-wow))\" },\n    { id: \"sad\", emoji: \"üò¢\", label: \"Sad\", color: \"rgb(var(--color-sad))\" },\n    { id: \"angry\", emoji: \"üò°\", label: \"Angry\", color: \"rgb(var(--color-angry))\" },\n  ]\n\nfunction Home() {\n  return (\n      <main className=\"flex min-h-auto flex-col items-center justify-center p-10 bg-background\">\n      <div className=\"bg-card border border-border rounded-[1rem] max-w-md w-full\">\n        <div className=\"rounded-none border-b p-20\">\n          <h1>Hey, Hover on emoji to react.</h1>\n        </div>\n        <div className=\"px-4 py-3 flex items-center justify-between\">\n          <ReactionBar\n            reactions={reactions}\n            defaultReaction={reactions[0]}\n            onReactionSelect={(reaction) => console.log(\"Selected reaction:\", reaction)}\n            variant=\"ghost\"\n            size=\"lg\"\n            showLabel\n            imageSize={20}\n            popoverPosition=\"top\"\n            popoverClassName=\"bg-secondary\"\n            emojiSize={24}\n            className=\"ml-1\"\n          />\n          <button className=\"px-3 py-1 text-sm bg-primary text-primary-foreground rounded-full\">Easy UI</button>\n        </div>\n      </div>\n    </main>\n  )\n}\n\nexport default Home",
      "type": "registry:component",
      "target": "page.tsx"
    }
  ],
  "author": "Kathan Mehta<ktmehta25@gmail.com>",
  "title": "Reaction Bar"
}